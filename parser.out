Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> CODIGO
Rule 1     CODIGO -> CONTENIDO
Rule 2     CONTENIDO -> CONTENIDO INSTRUCCIONES
Rule 3     CONTENIDO -> INSTRUCCIONES
Rule 4     INSTRUCCIONES -> DEC_VAR
Rule 5     INSTRUCCIONES -> ASIG_VAR
Rule 6     INSTRUCCIONES -> EST_CONDICIONALES
Rule 7     INSTRUCCIONES -> EST_ITERATIVAS
Rule 8     INSTRUCCIONES -> SENT_CFLUJO
Rule 9     INSTRUCCIONES -> DEC_METODOS
Rule 10    INSTRUCCIONES -> DEC_FUNCIONES
Rule 11    INSTRUCCIONES -> RETORNO
Rule 12    INSTRUCCIONES -> LLAMADA
Rule 13    DEC_VAR -> TIPO_DATO identificador asignacion DATO ptcoma
Rule 14    TIPO_DATO -> private_int
Rule 15    TIPO_DATO -> private_double
Rule 16    TIPO_DATO -> private_string
Rule 17    TIPO_DATO -> private_char
Rule 18    TIPO_DATO -> private_boolean
Rule 19    DATO -> entero
Rule 20    DATO -> decimal
Rule 21    DATO -> cadena
Rule 22    DATO -> char
Rule 23    DATO -> private_true
Rule 24    DATO -> private_false
Rule 25    ASIG_VAR -> identificador asignacion DATO ptcoma
Rule 26    EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
Rule 27    EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
Rule 28    OPERACION -> OPERACION E
Rule 29    OPERACION -> E
Rule 30    E -> E oper_suma E
Rule 31    E -> E oper_resta E
Rule 32    E -> E oper_multiplicacion E
Rule 33    E -> E oper_division E
Rule 34    E -> E oper_resto E
Rule 35    E -> E oper_igualacion E
Rule 36    E -> E oper_diferenciacion E
Rule 37    E -> E oper_mayor E
Rule 38    E -> E oper_mayor_igual E
Rule 39    E -> E oper_menor E
Rule 40    E -> E oper_menor_igual E
Rule 41    E -> E oper_and E
Rule 42    E -> E oper_or E
Rule 43    E -> oper_not E
Rule 44    E -> identificador
Rule 45    E -> entero
Rule 46    E -> private_false
Rule 47    E -> private_true
Rule 48    INSTRUCCIONS -> INSTRUCCIONS INSTRUCCIONES2
Rule 49    INSTRUCCIONS -> INSTRUCCIONES2
Rule 50    INSTRUCCIONES2 -> DEC_VAR
Rule 51    INSTRUCCIONES2 -> ASIG_VAR
Rule 52    INSTRUCCIONES2 -> EST_CONDICIONALES
Rule 53    INSTRUCCIONES2 -> EST_ITERATIVAS
Rule 54    INSTRUCCIONES2 -> SENT_CFLUJO
Rule 55    INSTRUCCIONES2 -> DEC_METODOS
Rule 56    INSTRUCCIONES2 -> DEC_FUNCIONES
Rule 57    INSTRUCCIONES2 -> RETORNO
Rule 58    INSTRUCCIONES2 -> LLAMADA
Rule 59    EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
Rule 60    EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
Rule 61    SENT_CFLUJO -> private_break ptcoma
Rule 62    SENT_CFLUJO -> private_continue ptcoma
Rule 63    DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
Rule 64    DEC_METODOS -> private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
Rule 65    PARAMETROS -> PARAMETROS coma TIPO_DATO identificador
Rule 66    PARAMETROS -> TIPO_DATO identificador
Rule 67    DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
Rule 68    DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
Rule 69    RETORNO -> private_return ptcoma
Rule 70    RETORNO -> private_return DATO ptcoma
Rule 71    LLAMADA -> identificador par_a ARGUMENTOS par_b
Rule 72    LLAMADA -> identificador par_a par_b
Rule 73    ARGUMENTOS -> ARGUMENTOS coma DATO
Rule 74    ARGUMENTOS -> DATO

Terminals, with rules where they appear

asignacion           : 13 25
cadena               : 21
char                 : 22
coma                 : 65 73
decimal              : 20
entero               : 19 45
error                : 
identificador        : 13 25 44 63 64 65 66 67 68 71 72
llave_a              : 26 27 27 59 60 63 64 67 68
llave_b              : 26 27 27 59 60 63 64 67 68
oper_and             : 41
oper_diferenciacion  : 36
oper_division        : 33
oper_igualacion      : 35
oper_mayor           : 37
oper_mayor_igual     : 38
oper_menor           : 39
oper_menor_igual     : 40
oper_multiplicacion  : 32
oper_not             : 43
oper_or              : 42
oper_resta           : 31
oper_resto           : 34
oper_suma            : 30
par_a                : 26 27 59 60 63 64 67 68 71 72
par_b                : 26 27 59 60 63 64 67 68 71 72
private_boolean      : 18
private_break        : 61
private_char         : 17
private_continue     : 62
private_do           : 60
private_double       : 15
private_else         : 27
private_false        : 24 46
private_if           : 26 27
private_int          : 14
private_return       : 69 70
private_string       : 16
private_true         : 23 47
private_void         : 63 64
private_while        : 59 60
ptcoma               : 13 25 60 61 62 69 70

Nonterminals, with rules where they appear

ARGUMENTOS           : 71 73
ASIG_VAR             : 5 51
CODIGO               : 0
CONTENIDO            : 1 2
DATO                 : 13 25 70 73 74
DEC_FUNCIONES        : 10 56
DEC_METODOS          : 9 55
DEC_VAR              : 4 50
E                    : 28 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43
EST_CONDICIONALES    : 6 52
EST_ITERATIVAS       : 7 53
INSTRUCCIONES        : 2 3
INSTRUCCIONES2       : 48 49
INSTRUCCIONS         : 26 27 27 48 59 60 63 64 67 68
LLAMADA              : 12 58
OPERACION            : 26 27 28 59 60
PARAMETROS           : 63 65 67
RETORNO              : 11 57
SENT_CFLUJO          : 8 54
TIPO_DATO            : 13 65 66 67 68

Parsing method: LALR

state 0

    (0) S' -> . CODIGO
    (1) CODIGO -> . CONTENIDO
    (2) CONTENIDO -> . CONTENIDO INSTRUCCIONES
    (3) CONTENIDO -> . INSTRUCCIONES
    (4) INSTRUCCIONES -> . DEC_VAR
    (5) INSTRUCCIONES -> . ASIG_VAR
    (6) INSTRUCCIONES -> . EST_CONDICIONALES
    (7) INSTRUCCIONES -> . EST_ITERATIVAS
    (8) INSTRUCCIONES -> . SENT_CFLUJO
    (9) INSTRUCCIONES -> . DEC_METODOS
    (10) INSTRUCCIONES -> . DEC_FUNCIONES
    (11) INSTRUCCIONES -> . RETORNO
    (12) INSTRUCCIONES -> . LLAMADA
    (13) DEC_VAR -> . TIPO_DATO identificador asignacion DATO ptcoma
    (25) ASIG_VAR -> . identificador asignacion DATO ptcoma
    (26) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (59) EST_ITERATIVAS -> . private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (60) EST_ITERATIVAS -> . private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (61) SENT_CFLUJO -> . private_break ptcoma
    (62) SENT_CFLUJO -> . private_continue ptcoma
    (63) DEC_METODOS -> . private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> . private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (67) DEC_FUNCIONES -> . TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> . TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (69) RETORNO -> . private_return ptcoma
    (70) RETORNO -> . private_return DATO ptcoma
    (71) LLAMADA -> . identificador par_a ARGUMENTOS par_b
    (72) LLAMADA -> . identificador par_a par_b
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    identificador   shift and go to state 14
    private_if      shift and go to state 15
    private_while   shift and go to state 16
    private_do      shift and go to state 17
    private_break   shift and go to state 18
    private_continue shift and go to state 19
    private_void    shift and go to state 20
    private_return  shift and go to state 21
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    CODIGO                         shift and go to state 1
    CONTENIDO                      shift and go to state 2
    INSTRUCCIONES                  shift and go to state 3
    DEC_VAR                        shift and go to state 4
    ASIG_VAR                       shift and go to state 5
    EST_CONDICIONALES              shift and go to state 6
    EST_ITERATIVAS                 shift and go to state 7
    SENT_CFLUJO                    shift and go to state 8
    DEC_METODOS                    shift and go to state 9
    DEC_FUNCIONES                  shift and go to state 10
    RETORNO                        shift and go to state 11
    LLAMADA                        shift and go to state 12
    TIPO_DATO                      shift and go to state 13

state 1

    (0) S' -> CODIGO .



state 2

    (1) CODIGO -> CONTENIDO .
    (2) CONTENIDO -> CONTENIDO . INSTRUCCIONES
    (4) INSTRUCCIONES -> . DEC_VAR
    (5) INSTRUCCIONES -> . ASIG_VAR
    (6) INSTRUCCIONES -> . EST_CONDICIONALES
    (7) INSTRUCCIONES -> . EST_ITERATIVAS
    (8) INSTRUCCIONES -> . SENT_CFLUJO
    (9) INSTRUCCIONES -> . DEC_METODOS
    (10) INSTRUCCIONES -> . DEC_FUNCIONES
    (11) INSTRUCCIONES -> . RETORNO
    (12) INSTRUCCIONES -> . LLAMADA
    (13) DEC_VAR -> . TIPO_DATO identificador asignacion DATO ptcoma
    (25) ASIG_VAR -> . identificador asignacion DATO ptcoma
    (26) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (59) EST_ITERATIVAS -> . private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (60) EST_ITERATIVAS -> . private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (61) SENT_CFLUJO -> . private_break ptcoma
    (62) SENT_CFLUJO -> . private_continue ptcoma
    (63) DEC_METODOS -> . private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> . private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (67) DEC_FUNCIONES -> . TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> . TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (69) RETORNO -> . private_return ptcoma
    (70) RETORNO -> . private_return DATO ptcoma
    (71) LLAMADA -> . identificador par_a ARGUMENTOS par_b
    (72) LLAMADA -> . identificador par_a par_b
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    $end            reduce using rule 1 (CODIGO -> CONTENIDO .)
    identificador   shift and go to state 14
    private_if      shift and go to state 15
    private_while   shift and go to state 16
    private_do      shift and go to state 17
    private_break   shift and go to state 18
    private_continue shift and go to state 19
    private_void    shift and go to state 20
    private_return  shift and go to state 21
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    INSTRUCCIONES                  shift and go to state 27
    DEC_VAR                        shift and go to state 4
    ASIG_VAR                       shift and go to state 5
    EST_CONDICIONALES              shift and go to state 6
    EST_ITERATIVAS                 shift and go to state 7
    SENT_CFLUJO                    shift and go to state 8
    DEC_METODOS                    shift and go to state 9
    DEC_FUNCIONES                  shift and go to state 10
    RETORNO                        shift and go to state 11
    LLAMADA                        shift and go to state 12
    TIPO_DATO                      shift and go to state 13

state 3

    (3) CONTENIDO -> INSTRUCCIONES .

    identificador   reduce using rule 3 (CONTENIDO -> INSTRUCCIONES .)
    private_if      reduce using rule 3 (CONTENIDO -> INSTRUCCIONES .)
    private_while   reduce using rule 3 (CONTENIDO -> INSTRUCCIONES .)
    private_do      reduce using rule 3 (CONTENIDO -> INSTRUCCIONES .)
    private_break   reduce using rule 3 (CONTENIDO -> INSTRUCCIONES .)
    private_continue reduce using rule 3 (CONTENIDO -> INSTRUCCIONES .)
    private_void    reduce using rule 3 (CONTENIDO -> INSTRUCCIONES .)
    private_return  reduce using rule 3 (CONTENIDO -> INSTRUCCIONES .)
    private_int     reduce using rule 3 (CONTENIDO -> INSTRUCCIONES .)
    private_double  reduce using rule 3 (CONTENIDO -> INSTRUCCIONES .)
    private_string  reduce using rule 3 (CONTENIDO -> INSTRUCCIONES .)
    private_char    reduce using rule 3 (CONTENIDO -> INSTRUCCIONES .)
    private_boolean reduce using rule 3 (CONTENIDO -> INSTRUCCIONES .)
    $end            reduce using rule 3 (CONTENIDO -> INSTRUCCIONES .)


state 4

    (4) INSTRUCCIONES -> DEC_VAR .

    identificador   reduce using rule 4 (INSTRUCCIONES -> DEC_VAR .)
    private_if      reduce using rule 4 (INSTRUCCIONES -> DEC_VAR .)
    private_while   reduce using rule 4 (INSTRUCCIONES -> DEC_VAR .)
    private_do      reduce using rule 4 (INSTRUCCIONES -> DEC_VAR .)
    private_break   reduce using rule 4 (INSTRUCCIONES -> DEC_VAR .)
    private_continue reduce using rule 4 (INSTRUCCIONES -> DEC_VAR .)
    private_void    reduce using rule 4 (INSTRUCCIONES -> DEC_VAR .)
    private_return  reduce using rule 4 (INSTRUCCIONES -> DEC_VAR .)
    private_int     reduce using rule 4 (INSTRUCCIONES -> DEC_VAR .)
    private_double  reduce using rule 4 (INSTRUCCIONES -> DEC_VAR .)
    private_string  reduce using rule 4 (INSTRUCCIONES -> DEC_VAR .)
    private_char    reduce using rule 4 (INSTRUCCIONES -> DEC_VAR .)
    private_boolean reduce using rule 4 (INSTRUCCIONES -> DEC_VAR .)
    $end            reduce using rule 4 (INSTRUCCIONES -> DEC_VAR .)


state 5

    (5) INSTRUCCIONES -> ASIG_VAR .

    identificador   reduce using rule 5 (INSTRUCCIONES -> ASIG_VAR .)
    private_if      reduce using rule 5 (INSTRUCCIONES -> ASIG_VAR .)
    private_while   reduce using rule 5 (INSTRUCCIONES -> ASIG_VAR .)
    private_do      reduce using rule 5 (INSTRUCCIONES -> ASIG_VAR .)
    private_break   reduce using rule 5 (INSTRUCCIONES -> ASIG_VAR .)
    private_continue reduce using rule 5 (INSTRUCCIONES -> ASIG_VAR .)
    private_void    reduce using rule 5 (INSTRUCCIONES -> ASIG_VAR .)
    private_return  reduce using rule 5 (INSTRUCCIONES -> ASIG_VAR .)
    private_int     reduce using rule 5 (INSTRUCCIONES -> ASIG_VAR .)
    private_double  reduce using rule 5 (INSTRUCCIONES -> ASIG_VAR .)
    private_string  reduce using rule 5 (INSTRUCCIONES -> ASIG_VAR .)
    private_char    reduce using rule 5 (INSTRUCCIONES -> ASIG_VAR .)
    private_boolean reduce using rule 5 (INSTRUCCIONES -> ASIG_VAR .)
    $end            reduce using rule 5 (INSTRUCCIONES -> ASIG_VAR .)


state 6

    (6) INSTRUCCIONES -> EST_CONDICIONALES .

    identificador   reduce using rule 6 (INSTRUCCIONES -> EST_CONDICIONALES .)
    private_if      reduce using rule 6 (INSTRUCCIONES -> EST_CONDICIONALES .)
    private_while   reduce using rule 6 (INSTRUCCIONES -> EST_CONDICIONALES .)
    private_do      reduce using rule 6 (INSTRUCCIONES -> EST_CONDICIONALES .)
    private_break   reduce using rule 6 (INSTRUCCIONES -> EST_CONDICIONALES .)
    private_continue reduce using rule 6 (INSTRUCCIONES -> EST_CONDICIONALES .)
    private_void    reduce using rule 6 (INSTRUCCIONES -> EST_CONDICIONALES .)
    private_return  reduce using rule 6 (INSTRUCCIONES -> EST_CONDICIONALES .)
    private_int     reduce using rule 6 (INSTRUCCIONES -> EST_CONDICIONALES .)
    private_double  reduce using rule 6 (INSTRUCCIONES -> EST_CONDICIONALES .)
    private_string  reduce using rule 6 (INSTRUCCIONES -> EST_CONDICIONALES .)
    private_char    reduce using rule 6 (INSTRUCCIONES -> EST_CONDICIONALES .)
    private_boolean reduce using rule 6 (INSTRUCCIONES -> EST_CONDICIONALES .)
    $end            reduce using rule 6 (INSTRUCCIONES -> EST_CONDICIONALES .)


state 7

    (7) INSTRUCCIONES -> EST_ITERATIVAS .

    identificador   reduce using rule 7 (INSTRUCCIONES -> EST_ITERATIVAS .)
    private_if      reduce using rule 7 (INSTRUCCIONES -> EST_ITERATIVAS .)
    private_while   reduce using rule 7 (INSTRUCCIONES -> EST_ITERATIVAS .)
    private_do      reduce using rule 7 (INSTRUCCIONES -> EST_ITERATIVAS .)
    private_break   reduce using rule 7 (INSTRUCCIONES -> EST_ITERATIVAS .)
    private_continue reduce using rule 7 (INSTRUCCIONES -> EST_ITERATIVAS .)
    private_void    reduce using rule 7 (INSTRUCCIONES -> EST_ITERATIVAS .)
    private_return  reduce using rule 7 (INSTRUCCIONES -> EST_ITERATIVAS .)
    private_int     reduce using rule 7 (INSTRUCCIONES -> EST_ITERATIVAS .)
    private_double  reduce using rule 7 (INSTRUCCIONES -> EST_ITERATIVAS .)
    private_string  reduce using rule 7 (INSTRUCCIONES -> EST_ITERATIVAS .)
    private_char    reduce using rule 7 (INSTRUCCIONES -> EST_ITERATIVAS .)
    private_boolean reduce using rule 7 (INSTRUCCIONES -> EST_ITERATIVAS .)
    $end            reduce using rule 7 (INSTRUCCIONES -> EST_ITERATIVAS .)


state 8

    (8) INSTRUCCIONES -> SENT_CFLUJO .

    identificador   reduce using rule 8 (INSTRUCCIONES -> SENT_CFLUJO .)
    private_if      reduce using rule 8 (INSTRUCCIONES -> SENT_CFLUJO .)
    private_while   reduce using rule 8 (INSTRUCCIONES -> SENT_CFLUJO .)
    private_do      reduce using rule 8 (INSTRUCCIONES -> SENT_CFLUJO .)
    private_break   reduce using rule 8 (INSTRUCCIONES -> SENT_CFLUJO .)
    private_continue reduce using rule 8 (INSTRUCCIONES -> SENT_CFLUJO .)
    private_void    reduce using rule 8 (INSTRUCCIONES -> SENT_CFLUJO .)
    private_return  reduce using rule 8 (INSTRUCCIONES -> SENT_CFLUJO .)
    private_int     reduce using rule 8 (INSTRUCCIONES -> SENT_CFLUJO .)
    private_double  reduce using rule 8 (INSTRUCCIONES -> SENT_CFLUJO .)
    private_string  reduce using rule 8 (INSTRUCCIONES -> SENT_CFLUJO .)
    private_char    reduce using rule 8 (INSTRUCCIONES -> SENT_CFLUJO .)
    private_boolean reduce using rule 8 (INSTRUCCIONES -> SENT_CFLUJO .)
    $end            reduce using rule 8 (INSTRUCCIONES -> SENT_CFLUJO .)


state 9

    (9) INSTRUCCIONES -> DEC_METODOS .

    identificador   reduce using rule 9 (INSTRUCCIONES -> DEC_METODOS .)
    private_if      reduce using rule 9 (INSTRUCCIONES -> DEC_METODOS .)
    private_while   reduce using rule 9 (INSTRUCCIONES -> DEC_METODOS .)
    private_do      reduce using rule 9 (INSTRUCCIONES -> DEC_METODOS .)
    private_break   reduce using rule 9 (INSTRUCCIONES -> DEC_METODOS .)
    private_continue reduce using rule 9 (INSTRUCCIONES -> DEC_METODOS .)
    private_void    reduce using rule 9 (INSTRUCCIONES -> DEC_METODOS .)
    private_return  reduce using rule 9 (INSTRUCCIONES -> DEC_METODOS .)
    private_int     reduce using rule 9 (INSTRUCCIONES -> DEC_METODOS .)
    private_double  reduce using rule 9 (INSTRUCCIONES -> DEC_METODOS .)
    private_string  reduce using rule 9 (INSTRUCCIONES -> DEC_METODOS .)
    private_char    reduce using rule 9 (INSTRUCCIONES -> DEC_METODOS .)
    private_boolean reduce using rule 9 (INSTRUCCIONES -> DEC_METODOS .)
    $end            reduce using rule 9 (INSTRUCCIONES -> DEC_METODOS .)


state 10

    (10) INSTRUCCIONES -> DEC_FUNCIONES .

    identificador   reduce using rule 10 (INSTRUCCIONES -> DEC_FUNCIONES .)
    private_if      reduce using rule 10 (INSTRUCCIONES -> DEC_FUNCIONES .)
    private_while   reduce using rule 10 (INSTRUCCIONES -> DEC_FUNCIONES .)
    private_do      reduce using rule 10 (INSTRUCCIONES -> DEC_FUNCIONES .)
    private_break   reduce using rule 10 (INSTRUCCIONES -> DEC_FUNCIONES .)
    private_continue reduce using rule 10 (INSTRUCCIONES -> DEC_FUNCIONES .)
    private_void    reduce using rule 10 (INSTRUCCIONES -> DEC_FUNCIONES .)
    private_return  reduce using rule 10 (INSTRUCCIONES -> DEC_FUNCIONES .)
    private_int     reduce using rule 10 (INSTRUCCIONES -> DEC_FUNCIONES .)
    private_double  reduce using rule 10 (INSTRUCCIONES -> DEC_FUNCIONES .)
    private_string  reduce using rule 10 (INSTRUCCIONES -> DEC_FUNCIONES .)
    private_char    reduce using rule 10 (INSTRUCCIONES -> DEC_FUNCIONES .)
    private_boolean reduce using rule 10 (INSTRUCCIONES -> DEC_FUNCIONES .)
    $end            reduce using rule 10 (INSTRUCCIONES -> DEC_FUNCIONES .)


state 11

    (11) INSTRUCCIONES -> RETORNO .

    identificador   reduce using rule 11 (INSTRUCCIONES -> RETORNO .)
    private_if      reduce using rule 11 (INSTRUCCIONES -> RETORNO .)
    private_while   reduce using rule 11 (INSTRUCCIONES -> RETORNO .)
    private_do      reduce using rule 11 (INSTRUCCIONES -> RETORNO .)
    private_break   reduce using rule 11 (INSTRUCCIONES -> RETORNO .)
    private_continue reduce using rule 11 (INSTRUCCIONES -> RETORNO .)
    private_void    reduce using rule 11 (INSTRUCCIONES -> RETORNO .)
    private_return  reduce using rule 11 (INSTRUCCIONES -> RETORNO .)
    private_int     reduce using rule 11 (INSTRUCCIONES -> RETORNO .)
    private_double  reduce using rule 11 (INSTRUCCIONES -> RETORNO .)
    private_string  reduce using rule 11 (INSTRUCCIONES -> RETORNO .)
    private_char    reduce using rule 11 (INSTRUCCIONES -> RETORNO .)
    private_boolean reduce using rule 11 (INSTRUCCIONES -> RETORNO .)
    $end            reduce using rule 11 (INSTRUCCIONES -> RETORNO .)


state 12

    (12) INSTRUCCIONES -> LLAMADA .

    identificador   reduce using rule 12 (INSTRUCCIONES -> LLAMADA .)
    private_if      reduce using rule 12 (INSTRUCCIONES -> LLAMADA .)
    private_while   reduce using rule 12 (INSTRUCCIONES -> LLAMADA .)
    private_do      reduce using rule 12 (INSTRUCCIONES -> LLAMADA .)
    private_break   reduce using rule 12 (INSTRUCCIONES -> LLAMADA .)
    private_continue reduce using rule 12 (INSTRUCCIONES -> LLAMADA .)
    private_void    reduce using rule 12 (INSTRUCCIONES -> LLAMADA .)
    private_return  reduce using rule 12 (INSTRUCCIONES -> LLAMADA .)
    private_int     reduce using rule 12 (INSTRUCCIONES -> LLAMADA .)
    private_double  reduce using rule 12 (INSTRUCCIONES -> LLAMADA .)
    private_string  reduce using rule 12 (INSTRUCCIONES -> LLAMADA .)
    private_char    reduce using rule 12 (INSTRUCCIONES -> LLAMADA .)
    private_boolean reduce using rule 12 (INSTRUCCIONES -> LLAMADA .)
    $end            reduce using rule 12 (INSTRUCCIONES -> LLAMADA .)


state 13

    (13) DEC_VAR -> TIPO_DATO . identificador asignacion DATO ptcoma
    (67) DEC_FUNCIONES -> TIPO_DATO . identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> TIPO_DATO . identificador par_a par_b llave_a INSTRUCCIONS llave_b

    identificador   shift and go to state 28


state 14

    (25) ASIG_VAR -> identificador . asignacion DATO ptcoma
    (71) LLAMADA -> identificador . par_a ARGUMENTOS par_b
    (72) LLAMADA -> identificador . par_a par_b

    asignacion      shift and go to state 29
    par_a           shift and go to state 30


state 15

    (26) EST_CONDICIONALES -> private_if . par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> private_if . par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b

    par_a           shift and go to state 31


state 16

    (59) EST_ITERATIVAS -> private_while . par_a OPERACION par_b llave_a INSTRUCCIONS llave_b

    par_a           shift and go to state 32


state 17

    (60) EST_ITERATIVAS -> private_do . llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma

    llave_a         shift and go to state 33


state 18

    (61) SENT_CFLUJO -> private_break . ptcoma

    ptcoma          shift and go to state 34


state 19

    (62) SENT_CFLUJO -> private_continue . ptcoma

    ptcoma          shift and go to state 35


state 20

    (63) DEC_METODOS -> private_void . identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> private_void . identificador par_a par_b llave_a INSTRUCCIONS llave_b

    identificador   shift and go to state 36


state 21

    (69) RETORNO -> private_return . ptcoma
    (70) RETORNO -> private_return . DATO ptcoma
    (19) DATO -> . entero
    (20) DATO -> . decimal
    (21) DATO -> . cadena
    (22) DATO -> . char
    (23) DATO -> . private_true
    (24) DATO -> . private_false

    ptcoma          shift and go to state 37
    entero          shift and go to state 39
    decimal         shift and go to state 40
    cadena          shift and go to state 41
    char            shift and go to state 42
    private_true    shift and go to state 43
    private_false   shift and go to state 44

    DATO                           shift and go to state 38

state 22

    (14) TIPO_DATO -> private_int .

    identificador   reduce using rule 14 (TIPO_DATO -> private_int .)


state 23

    (15) TIPO_DATO -> private_double .

    identificador   reduce using rule 15 (TIPO_DATO -> private_double .)


state 24

    (16) TIPO_DATO -> private_string .

    identificador   reduce using rule 16 (TIPO_DATO -> private_string .)


state 25

    (17) TIPO_DATO -> private_char .

    identificador   reduce using rule 17 (TIPO_DATO -> private_char .)


state 26

    (18) TIPO_DATO -> private_boolean .

    identificador   reduce using rule 18 (TIPO_DATO -> private_boolean .)


state 27

    (2) CONTENIDO -> CONTENIDO INSTRUCCIONES .

    identificador   reduce using rule 2 (CONTENIDO -> CONTENIDO INSTRUCCIONES .)
    private_if      reduce using rule 2 (CONTENIDO -> CONTENIDO INSTRUCCIONES .)
    private_while   reduce using rule 2 (CONTENIDO -> CONTENIDO INSTRUCCIONES .)
    private_do      reduce using rule 2 (CONTENIDO -> CONTENIDO INSTRUCCIONES .)
    private_break   reduce using rule 2 (CONTENIDO -> CONTENIDO INSTRUCCIONES .)
    private_continue reduce using rule 2 (CONTENIDO -> CONTENIDO INSTRUCCIONES .)
    private_void    reduce using rule 2 (CONTENIDO -> CONTENIDO INSTRUCCIONES .)
    private_return  reduce using rule 2 (CONTENIDO -> CONTENIDO INSTRUCCIONES .)
    private_int     reduce using rule 2 (CONTENIDO -> CONTENIDO INSTRUCCIONES .)
    private_double  reduce using rule 2 (CONTENIDO -> CONTENIDO INSTRUCCIONES .)
    private_string  reduce using rule 2 (CONTENIDO -> CONTENIDO INSTRUCCIONES .)
    private_char    reduce using rule 2 (CONTENIDO -> CONTENIDO INSTRUCCIONES .)
    private_boolean reduce using rule 2 (CONTENIDO -> CONTENIDO INSTRUCCIONES .)
    $end            reduce using rule 2 (CONTENIDO -> CONTENIDO INSTRUCCIONES .)


state 28

    (13) DEC_VAR -> TIPO_DATO identificador . asignacion DATO ptcoma
    (67) DEC_FUNCIONES -> TIPO_DATO identificador . par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> TIPO_DATO identificador . par_a par_b llave_a INSTRUCCIONS llave_b

    asignacion      shift and go to state 45
    par_a           shift and go to state 46


state 29

    (25) ASIG_VAR -> identificador asignacion . DATO ptcoma
    (19) DATO -> . entero
    (20) DATO -> . decimal
    (21) DATO -> . cadena
    (22) DATO -> . char
    (23) DATO -> . private_true
    (24) DATO -> . private_false

    entero          shift and go to state 39
    decimal         shift and go to state 40
    cadena          shift and go to state 41
    char            shift and go to state 42
    private_true    shift and go to state 43
    private_false   shift and go to state 44

    DATO                           shift and go to state 47

state 30

    (71) LLAMADA -> identificador par_a . ARGUMENTOS par_b
    (72) LLAMADA -> identificador par_a . par_b
    (73) ARGUMENTOS -> . ARGUMENTOS coma DATO
    (74) ARGUMENTOS -> . DATO
    (19) DATO -> . entero
    (20) DATO -> . decimal
    (21) DATO -> . cadena
    (22) DATO -> . char
    (23) DATO -> . private_true
    (24) DATO -> . private_false

    par_b           shift and go to state 49
    entero          shift and go to state 39
    decimal         shift and go to state 40
    cadena          shift and go to state 41
    char            shift and go to state 42
    private_true    shift and go to state 43
    private_false   shift and go to state 44

    ARGUMENTOS                     shift and go to state 48
    DATO                           shift and go to state 50

state 31

    (26) EST_CONDICIONALES -> private_if par_a . OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> private_if par_a . OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (28) OPERACION -> . OPERACION E
    (29) OPERACION -> . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    OPERACION                      shift and go to state 51
    E                              shift and go to state 52

state 32

    (59) EST_ITERATIVAS -> private_while par_a . OPERACION par_b llave_a INSTRUCCIONS llave_b
    (28) OPERACION -> . OPERACION E
    (29) OPERACION -> . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    OPERACION                      shift and go to state 58
    E                              shift and go to state 52

state 33

    (60) EST_ITERATIVAS -> private_do llave_a . INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (48) INSTRUCCIONS -> . INSTRUCCIONS INSTRUCCIONES2
    (49) INSTRUCCIONS -> . INSTRUCCIONES2
    (50) INSTRUCCIONES2 -> . DEC_VAR
    (51) INSTRUCCIONES2 -> . ASIG_VAR
    (52) INSTRUCCIONES2 -> . EST_CONDICIONALES
    (53) INSTRUCCIONES2 -> . EST_ITERATIVAS
    (54) INSTRUCCIONES2 -> . SENT_CFLUJO
    (55) INSTRUCCIONES2 -> . DEC_METODOS
    (56) INSTRUCCIONES2 -> . DEC_FUNCIONES
    (57) INSTRUCCIONES2 -> . RETORNO
    (58) INSTRUCCIONES2 -> . LLAMADA
    (13) DEC_VAR -> . TIPO_DATO identificador asignacion DATO ptcoma
    (25) ASIG_VAR -> . identificador asignacion DATO ptcoma
    (26) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (59) EST_ITERATIVAS -> . private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (60) EST_ITERATIVAS -> . private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (61) SENT_CFLUJO -> . private_break ptcoma
    (62) SENT_CFLUJO -> . private_continue ptcoma
    (63) DEC_METODOS -> . private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> . private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (67) DEC_FUNCIONES -> . TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> . TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (69) RETORNO -> . private_return ptcoma
    (70) RETORNO -> . private_return DATO ptcoma
    (71) LLAMADA -> . identificador par_a ARGUMENTOS par_b
    (72) LLAMADA -> . identificador par_a par_b
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    identificador   shift and go to state 14
    private_if      shift and go to state 15
    private_while   shift and go to state 16
    private_do      shift and go to state 17
    private_break   shift and go to state 18
    private_continue shift and go to state 19
    private_void    shift and go to state 20
    private_return  shift and go to state 21
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    INSTRUCCIONS                   shift and go to state 59
    INSTRUCCIONES2                 shift and go to state 60
    DEC_VAR                        shift and go to state 61
    ASIG_VAR                       shift and go to state 62
    EST_CONDICIONALES              shift and go to state 63
    EST_ITERATIVAS                 shift and go to state 64
    SENT_CFLUJO                    shift and go to state 65
    DEC_METODOS                    shift and go to state 66
    DEC_FUNCIONES                  shift and go to state 67
    RETORNO                        shift and go to state 68
    LLAMADA                        shift and go to state 69
    TIPO_DATO                      shift and go to state 13

state 34

    (61) SENT_CFLUJO -> private_break ptcoma .

    identificador   reduce using rule 61 (SENT_CFLUJO -> private_break ptcoma .)
    private_if      reduce using rule 61 (SENT_CFLUJO -> private_break ptcoma .)
    private_while   reduce using rule 61 (SENT_CFLUJO -> private_break ptcoma .)
    private_do      reduce using rule 61 (SENT_CFLUJO -> private_break ptcoma .)
    private_break   reduce using rule 61 (SENT_CFLUJO -> private_break ptcoma .)
    private_continue reduce using rule 61 (SENT_CFLUJO -> private_break ptcoma .)
    private_void    reduce using rule 61 (SENT_CFLUJO -> private_break ptcoma .)
    private_return  reduce using rule 61 (SENT_CFLUJO -> private_break ptcoma .)
    private_int     reduce using rule 61 (SENT_CFLUJO -> private_break ptcoma .)
    private_double  reduce using rule 61 (SENT_CFLUJO -> private_break ptcoma .)
    private_string  reduce using rule 61 (SENT_CFLUJO -> private_break ptcoma .)
    private_char    reduce using rule 61 (SENT_CFLUJO -> private_break ptcoma .)
    private_boolean reduce using rule 61 (SENT_CFLUJO -> private_break ptcoma .)
    $end            reduce using rule 61 (SENT_CFLUJO -> private_break ptcoma .)
    llave_b         reduce using rule 61 (SENT_CFLUJO -> private_break ptcoma .)


state 35

    (62) SENT_CFLUJO -> private_continue ptcoma .

    identificador   reduce using rule 62 (SENT_CFLUJO -> private_continue ptcoma .)
    private_if      reduce using rule 62 (SENT_CFLUJO -> private_continue ptcoma .)
    private_while   reduce using rule 62 (SENT_CFLUJO -> private_continue ptcoma .)
    private_do      reduce using rule 62 (SENT_CFLUJO -> private_continue ptcoma .)
    private_break   reduce using rule 62 (SENT_CFLUJO -> private_continue ptcoma .)
    private_continue reduce using rule 62 (SENT_CFLUJO -> private_continue ptcoma .)
    private_void    reduce using rule 62 (SENT_CFLUJO -> private_continue ptcoma .)
    private_return  reduce using rule 62 (SENT_CFLUJO -> private_continue ptcoma .)
    private_int     reduce using rule 62 (SENT_CFLUJO -> private_continue ptcoma .)
    private_double  reduce using rule 62 (SENT_CFLUJO -> private_continue ptcoma .)
    private_string  reduce using rule 62 (SENT_CFLUJO -> private_continue ptcoma .)
    private_char    reduce using rule 62 (SENT_CFLUJO -> private_continue ptcoma .)
    private_boolean reduce using rule 62 (SENT_CFLUJO -> private_continue ptcoma .)
    $end            reduce using rule 62 (SENT_CFLUJO -> private_continue ptcoma .)
    llave_b         reduce using rule 62 (SENT_CFLUJO -> private_continue ptcoma .)


state 36

    (63) DEC_METODOS -> private_void identificador . par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> private_void identificador . par_a par_b llave_a INSTRUCCIONS llave_b

    par_a           shift and go to state 70


state 37

    (69) RETORNO -> private_return ptcoma .

    identificador   reduce using rule 69 (RETORNO -> private_return ptcoma .)
    private_if      reduce using rule 69 (RETORNO -> private_return ptcoma .)
    private_while   reduce using rule 69 (RETORNO -> private_return ptcoma .)
    private_do      reduce using rule 69 (RETORNO -> private_return ptcoma .)
    private_break   reduce using rule 69 (RETORNO -> private_return ptcoma .)
    private_continue reduce using rule 69 (RETORNO -> private_return ptcoma .)
    private_void    reduce using rule 69 (RETORNO -> private_return ptcoma .)
    private_return  reduce using rule 69 (RETORNO -> private_return ptcoma .)
    private_int     reduce using rule 69 (RETORNO -> private_return ptcoma .)
    private_double  reduce using rule 69 (RETORNO -> private_return ptcoma .)
    private_string  reduce using rule 69 (RETORNO -> private_return ptcoma .)
    private_char    reduce using rule 69 (RETORNO -> private_return ptcoma .)
    private_boolean reduce using rule 69 (RETORNO -> private_return ptcoma .)
    $end            reduce using rule 69 (RETORNO -> private_return ptcoma .)
    llave_b         reduce using rule 69 (RETORNO -> private_return ptcoma .)


state 38

    (70) RETORNO -> private_return DATO . ptcoma

    ptcoma          shift and go to state 71


state 39

    (19) DATO -> entero .

    ptcoma          reduce using rule 19 (DATO -> entero .)
    par_b           reduce using rule 19 (DATO -> entero .)
    coma            reduce using rule 19 (DATO -> entero .)


state 40

    (20) DATO -> decimal .

    ptcoma          reduce using rule 20 (DATO -> decimal .)
    par_b           reduce using rule 20 (DATO -> decimal .)
    coma            reduce using rule 20 (DATO -> decimal .)


state 41

    (21) DATO -> cadena .

    ptcoma          reduce using rule 21 (DATO -> cadena .)
    par_b           reduce using rule 21 (DATO -> cadena .)
    coma            reduce using rule 21 (DATO -> cadena .)


state 42

    (22) DATO -> char .

    ptcoma          reduce using rule 22 (DATO -> char .)
    par_b           reduce using rule 22 (DATO -> char .)
    coma            reduce using rule 22 (DATO -> char .)


state 43

    (23) DATO -> private_true .

    ptcoma          reduce using rule 23 (DATO -> private_true .)
    par_b           reduce using rule 23 (DATO -> private_true .)
    coma            reduce using rule 23 (DATO -> private_true .)


state 44

    (24) DATO -> private_false .

    ptcoma          reduce using rule 24 (DATO -> private_false .)
    par_b           reduce using rule 24 (DATO -> private_false .)
    coma            reduce using rule 24 (DATO -> private_false .)


state 45

    (13) DEC_VAR -> TIPO_DATO identificador asignacion . DATO ptcoma
    (19) DATO -> . entero
    (20) DATO -> . decimal
    (21) DATO -> . cadena
    (22) DATO -> . char
    (23) DATO -> . private_true
    (24) DATO -> . private_false

    entero          shift and go to state 39
    decimal         shift and go to state 40
    cadena          shift and go to state 41
    char            shift and go to state 42
    private_true    shift and go to state 43
    private_false   shift and go to state 44

    DATO                           shift and go to state 72

state 46

    (67) DEC_FUNCIONES -> TIPO_DATO identificador par_a . PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> TIPO_DATO identificador par_a . par_b llave_a INSTRUCCIONS llave_b
    (65) PARAMETROS -> . PARAMETROS coma TIPO_DATO identificador
    (66) PARAMETROS -> . TIPO_DATO identificador
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    par_b           shift and go to state 75
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    TIPO_DATO                      shift and go to state 73
    PARAMETROS                     shift and go to state 74

state 47

    (25) ASIG_VAR -> identificador asignacion DATO . ptcoma

    ptcoma          shift and go to state 76


state 48

    (71) LLAMADA -> identificador par_a ARGUMENTOS . par_b
    (73) ARGUMENTOS -> ARGUMENTOS . coma DATO

    par_b           shift and go to state 77
    coma            shift and go to state 78


state 49

    (72) LLAMADA -> identificador par_a par_b .

    identificador   reduce using rule 72 (LLAMADA -> identificador par_a par_b .)
    private_if      reduce using rule 72 (LLAMADA -> identificador par_a par_b .)
    private_while   reduce using rule 72 (LLAMADA -> identificador par_a par_b .)
    private_do      reduce using rule 72 (LLAMADA -> identificador par_a par_b .)
    private_break   reduce using rule 72 (LLAMADA -> identificador par_a par_b .)
    private_continue reduce using rule 72 (LLAMADA -> identificador par_a par_b .)
    private_void    reduce using rule 72 (LLAMADA -> identificador par_a par_b .)
    private_return  reduce using rule 72 (LLAMADA -> identificador par_a par_b .)
    private_int     reduce using rule 72 (LLAMADA -> identificador par_a par_b .)
    private_double  reduce using rule 72 (LLAMADA -> identificador par_a par_b .)
    private_string  reduce using rule 72 (LLAMADA -> identificador par_a par_b .)
    private_char    reduce using rule 72 (LLAMADA -> identificador par_a par_b .)
    private_boolean reduce using rule 72 (LLAMADA -> identificador par_a par_b .)
    $end            reduce using rule 72 (LLAMADA -> identificador par_a par_b .)
    llave_b         reduce using rule 72 (LLAMADA -> identificador par_a par_b .)


state 50

    (74) ARGUMENTOS -> DATO .

    par_b           reduce using rule 74 (ARGUMENTOS -> DATO .)
    coma            reduce using rule 74 (ARGUMENTOS -> DATO .)


state 51

    (26) EST_CONDICIONALES -> private_if par_a OPERACION . par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> private_if par_a OPERACION . par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (28) OPERACION -> OPERACION . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    par_b           shift and go to state 79
    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    E                              shift and go to state 80

state 52

    (29) OPERACION -> E .
    (30) E -> E . oper_suma E
    (31) E -> E . oper_resta E
    (32) E -> E . oper_multiplicacion E
    (33) E -> E . oper_division E
    (34) E -> E . oper_resto E
    (35) E -> E . oper_igualacion E
    (36) E -> E . oper_diferenciacion E
    (37) E -> E . oper_mayor E
    (38) E -> E . oper_mayor_igual E
    (39) E -> E . oper_menor E
    (40) E -> E . oper_menor_igual E
    (41) E -> E . oper_and E
    (42) E -> E . oper_or E

    par_b           reduce using rule 29 (OPERACION -> E .)
    oper_not        reduce using rule 29 (OPERACION -> E .)
    identificador   reduce using rule 29 (OPERACION -> E .)
    entero          reduce using rule 29 (OPERACION -> E .)
    private_false   reduce using rule 29 (OPERACION -> E .)
    private_true    reduce using rule 29 (OPERACION -> E .)
    oper_suma       shift and go to state 81
    oper_resta      shift and go to state 82
    oper_multiplicacion shift and go to state 83
    oper_division   shift and go to state 84
    oper_resto      shift and go to state 85
    oper_igualacion shift and go to state 86
    oper_diferenciacion shift and go to state 87
    oper_mayor      shift and go to state 88
    oper_mayor_igual shift and go to state 89
    oper_menor      shift and go to state 90
    oper_menor_igual shift and go to state 91
    oper_and        shift and go to state 92
    oper_or         shift and go to state 93


state 53

    (43) E -> oper_not . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    E                              shift and go to state 94

state 54

    (44) E -> identificador .

    oper_suma       reduce using rule 44 (E -> identificador .)
    oper_resta      reduce using rule 44 (E -> identificador .)
    oper_multiplicacion reduce using rule 44 (E -> identificador .)
    oper_division   reduce using rule 44 (E -> identificador .)
    oper_resto      reduce using rule 44 (E -> identificador .)
    oper_igualacion reduce using rule 44 (E -> identificador .)
    oper_diferenciacion reduce using rule 44 (E -> identificador .)
    oper_mayor      reduce using rule 44 (E -> identificador .)
    oper_mayor_igual reduce using rule 44 (E -> identificador .)
    oper_menor      reduce using rule 44 (E -> identificador .)
    oper_menor_igual reduce using rule 44 (E -> identificador .)
    oper_and        reduce using rule 44 (E -> identificador .)
    oper_or         reduce using rule 44 (E -> identificador .)
    par_b           reduce using rule 44 (E -> identificador .)
    oper_not        reduce using rule 44 (E -> identificador .)
    identificador   reduce using rule 44 (E -> identificador .)
    entero          reduce using rule 44 (E -> identificador .)
    private_false   reduce using rule 44 (E -> identificador .)
    private_true    reduce using rule 44 (E -> identificador .)


state 55

    (45) E -> entero .

    oper_suma       reduce using rule 45 (E -> entero .)
    oper_resta      reduce using rule 45 (E -> entero .)
    oper_multiplicacion reduce using rule 45 (E -> entero .)
    oper_division   reduce using rule 45 (E -> entero .)
    oper_resto      reduce using rule 45 (E -> entero .)
    oper_igualacion reduce using rule 45 (E -> entero .)
    oper_diferenciacion reduce using rule 45 (E -> entero .)
    oper_mayor      reduce using rule 45 (E -> entero .)
    oper_mayor_igual reduce using rule 45 (E -> entero .)
    oper_menor      reduce using rule 45 (E -> entero .)
    oper_menor_igual reduce using rule 45 (E -> entero .)
    oper_and        reduce using rule 45 (E -> entero .)
    oper_or         reduce using rule 45 (E -> entero .)
    par_b           reduce using rule 45 (E -> entero .)
    oper_not        reduce using rule 45 (E -> entero .)
    identificador   reduce using rule 45 (E -> entero .)
    entero          reduce using rule 45 (E -> entero .)
    private_false   reduce using rule 45 (E -> entero .)
    private_true    reduce using rule 45 (E -> entero .)


state 56

    (46) E -> private_false .

    oper_suma       reduce using rule 46 (E -> private_false .)
    oper_resta      reduce using rule 46 (E -> private_false .)
    oper_multiplicacion reduce using rule 46 (E -> private_false .)
    oper_division   reduce using rule 46 (E -> private_false .)
    oper_resto      reduce using rule 46 (E -> private_false .)
    oper_igualacion reduce using rule 46 (E -> private_false .)
    oper_diferenciacion reduce using rule 46 (E -> private_false .)
    oper_mayor      reduce using rule 46 (E -> private_false .)
    oper_mayor_igual reduce using rule 46 (E -> private_false .)
    oper_menor      reduce using rule 46 (E -> private_false .)
    oper_menor_igual reduce using rule 46 (E -> private_false .)
    oper_and        reduce using rule 46 (E -> private_false .)
    oper_or         reduce using rule 46 (E -> private_false .)
    par_b           reduce using rule 46 (E -> private_false .)
    oper_not        reduce using rule 46 (E -> private_false .)
    identificador   reduce using rule 46 (E -> private_false .)
    entero          reduce using rule 46 (E -> private_false .)
    private_false   reduce using rule 46 (E -> private_false .)
    private_true    reduce using rule 46 (E -> private_false .)


state 57

    (47) E -> private_true .

    oper_suma       reduce using rule 47 (E -> private_true .)
    oper_resta      reduce using rule 47 (E -> private_true .)
    oper_multiplicacion reduce using rule 47 (E -> private_true .)
    oper_division   reduce using rule 47 (E -> private_true .)
    oper_resto      reduce using rule 47 (E -> private_true .)
    oper_igualacion reduce using rule 47 (E -> private_true .)
    oper_diferenciacion reduce using rule 47 (E -> private_true .)
    oper_mayor      reduce using rule 47 (E -> private_true .)
    oper_mayor_igual reduce using rule 47 (E -> private_true .)
    oper_menor      reduce using rule 47 (E -> private_true .)
    oper_menor_igual reduce using rule 47 (E -> private_true .)
    oper_and        reduce using rule 47 (E -> private_true .)
    oper_or         reduce using rule 47 (E -> private_true .)
    par_b           reduce using rule 47 (E -> private_true .)
    oper_not        reduce using rule 47 (E -> private_true .)
    identificador   reduce using rule 47 (E -> private_true .)
    entero          reduce using rule 47 (E -> private_true .)
    private_false   reduce using rule 47 (E -> private_true .)
    private_true    reduce using rule 47 (E -> private_true .)


state 58

    (59) EST_ITERATIVAS -> private_while par_a OPERACION . par_b llave_a INSTRUCCIONS llave_b
    (28) OPERACION -> OPERACION . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    par_b           shift and go to state 95
    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    E                              shift and go to state 80

state 59

    (60) EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS . llave_b private_while par_a OPERACION par_b ptcoma
    (48) INSTRUCCIONS -> INSTRUCCIONS . INSTRUCCIONES2
    (50) INSTRUCCIONES2 -> . DEC_VAR
    (51) INSTRUCCIONES2 -> . ASIG_VAR
    (52) INSTRUCCIONES2 -> . EST_CONDICIONALES
    (53) INSTRUCCIONES2 -> . EST_ITERATIVAS
    (54) INSTRUCCIONES2 -> . SENT_CFLUJO
    (55) INSTRUCCIONES2 -> . DEC_METODOS
    (56) INSTRUCCIONES2 -> . DEC_FUNCIONES
    (57) INSTRUCCIONES2 -> . RETORNO
    (58) INSTRUCCIONES2 -> . LLAMADA
    (13) DEC_VAR -> . TIPO_DATO identificador asignacion DATO ptcoma
    (25) ASIG_VAR -> . identificador asignacion DATO ptcoma
    (26) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (59) EST_ITERATIVAS -> . private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (60) EST_ITERATIVAS -> . private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (61) SENT_CFLUJO -> . private_break ptcoma
    (62) SENT_CFLUJO -> . private_continue ptcoma
    (63) DEC_METODOS -> . private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> . private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (67) DEC_FUNCIONES -> . TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> . TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (69) RETORNO -> . private_return ptcoma
    (70) RETORNO -> . private_return DATO ptcoma
    (71) LLAMADA -> . identificador par_a ARGUMENTOS par_b
    (72) LLAMADA -> . identificador par_a par_b
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    llave_b         shift and go to state 96
    identificador   shift and go to state 14
    private_if      shift and go to state 15
    private_while   shift and go to state 16
    private_do      shift and go to state 17
    private_break   shift and go to state 18
    private_continue shift and go to state 19
    private_void    shift and go to state 20
    private_return  shift and go to state 21
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    INSTRUCCIONES2                 shift and go to state 97
    DEC_VAR                        shift and go to state 61
    ASIG_VAR                       shift and go to state 62
    EST_CONDICIONALES              shift and go to state 63
    EST_ITERATIVAS                 shift and go to state 64
    SENT_CFLUJO                    shift and go to state 65
    DEC_METODOS                    shift and go to state 66
    DEC_FUNCIONES                  shift and go to state 67
    RETORNO                        shift and go to state 68
    LLAMADA                        shift and go to state 69
    TIPO_DATO                      shift and go to state 13

state 60

    (49) INSTRUCCIONS -> INSTRUCCIONES2 .

    llave_b         reduce using rule 49 (INSTRUCCIONS -> INSTRUCCIONES2 .)
    identificador   reduce using rule 49 (INSTRUCCIONS -> INSTRUCCIONES2 .)
    private_if      reduce using rule 49 (INSTRUCCIONS -> INSTRUCCIONES2 .)
    private_while   reduce using rule 49 (INSTRUCCIONS -> INSTRUCCIONES2 .)
    private_do      reduce using rule 49 (INSTRUCCIONS -> INSTRUCCIONES2 .)
    private_break   reduce using rule 49 (INSTRUCCIONS -> INSTRUCCIONES2 .)
    private_continue reduce using rule 49 (INSTRUCCIONS -> INSTRUCCIONES2 .)
    private_void    reduce using rule 49 (INSTRUCCIONS -> INSTRUCCIONES2 .)
    private_return  reduce using rule 49 (INSTRUCCIONS -> INSTRUCCIONES2 .)
    private_int     reduce using rule 49 (INSTRUCCIONS -> INSTRUCCIONES2 .)
    private_double  reduce using rule 49 (INSTRUCCIONS -> INSTRUCCIONES2 .)
    private_string  reduce using rule 49 (INSTRUCCIONS -> INSTRUCCIONES2 .)
    private_char    reduce using rule 49 (INSTRUCCIONS -> INSTRUCCIONES2 .)
    private_boolean reduce using rule 49 (INSTRUCCIONS -> INSTRUCCIONES2 .)


state 61

    (50) INSTRUCCIONES2 -> DEC_VAR .

    llave_b         reduce using rule 50 (INSTRUCCIONES2 -> DEC_VAR .)
    identificador   reduce using rule 50 (INSTRUCCIONES2 -> DEC_VAR .)
    private_if      reduce using rule 50 (INSTRUCCIONES2 -> DEC_VAR .)
    private_while   reduce using rule 50 (INSTRUCCIONES2 -> DEC_VAR .)
    private_do      reduce using rule 50 (INSTRUCCIONES2 -> DEC_VAR .)
    private_break   reduce using rule 50 (INSTRUCCIONES2 -> DEC_VAR .)
    private_continue reduce using rule 50 (INSTRUCCIONES2 -> DEC_VAR .)
    private_void    reduce using rule 50 (INSTRUCCIONES2 -> DEC_VAR .)
    private_return  reduce using rule 50 (INSTRUCCIONES2 -> DEC_VAR .)
    private_int     reduce using rule 50 (INSTRUCCIONES2 -> DEC_VAR .)
    private_double  reduce using rule 50 (INSTRUCCIONES2 -> DEC_VAR .)
    private_string  reduce using rule 50 (INSTRUCCIONES2 -> DEC_VAR .)
    private_char    reduce using rule 50 (INSTRUCCIONES2 -> DEC_VAR .)
    private_boolean reduce using rule 50 (INSTRUCCIONES2 -> DEC_VAR .)


state 62

    (51) INSTRUCCIONES2 -> ASIG_VAR .

    llave_b         reduce using rule 51 (INSTRUCCIONES2 -> ASIG_VAR .)
    identificador   reduce using rule 51 (INSTRUCCIONES2 -> ASIG_VAR .)
    private_if      reduce using rule 51 (INSTRUCCIONES2 -> ASIG_VAR .)
    private_while   reduce using rule 51 (INSTRUCCIONES2 -> ASIG_VAR .)
    private_do      reduce using rule 51 (INSTRUCCIONES2 -> ASIG_VAR .)
    private_break   reduce using rule 51 (INSTRUCCIONES2 -> ASIG_VAR .)
    private_continue reduce using rule 51 (INSTRUCCIONES2 -> ASIG_VAR .)
    private_void    reduce using rule 51 (INSTRUCCIONES2 -> ASIG_VAR .)
    private_return  reduce using rule 51 (INSTRUCCIONES2 -> ASIG_VAR .)
    private_int     reduce using rule 51 (INSTRUCCIONES2 -> ASIG_VAR .)
    private_double  reduce using rule 51 (INSTRUCCIONES2 -> ASIG_VAR .)
    private_string  reduce using rule 51 (INSTRUCCIONES2 -> ASIG_VAR .)
    private_char    reduce using rule 51 (INSTRUCCIONES2 -> ASIG_VAR .)
    private_boolean reduce using rule 51 (INSTRUCCIONES2 -> ASIG_VAR .)


state 63

    (52) INSTRUCCIONES2 -> EST_CONDICIONALES .

    llave_b         reduce using rule 52 (INSTRUCCIONES2 -> EST_CONDICIONALES .)
    identificador   reduce using rule 52 (INSTRUCCIONES2 -> EST_CONDICIONALES .)
    private_if      reduce using rule 52 (INSTRUCCIONES2 -> EST_CONDICIONALES .)
    private_while   reduce using rule 52 (INSTRUCCIONES2 -> EST_CONDICIONALES .)
    private_do      reduce using rule 52 (INSTRUCCIONES2 -> EST_CONDICIONALES .)
    private_break   reduce using rule 52 (INSTRUCCIONES2 -> EST_CONDICIONALES .)
    private_continue reduce using rule 52 (INSTRUCCIONES2 -> EST_CONDICIONALES .)
    private_void    reduce using rule 52 (INSTRUCCIONES2 -> EST_CONDICIONALES .)
    private_return  reduce using rule 52 (INSTRUCCIONES2 -> EST_CONDICIONALES .)
    private_int     reduce using rule 52 (INSTRUCCIONES2 -> EST_CONDICIONALES .)
    private_double  reduce using rule 52 (INSTRUCCIONES2 -> EST_CONDICIONALES .)
    private_string  reduce using rule 52 (INSTRUCCIONES2 -> EST_CONDICIONALES .)
    private_char    reduce using rule 52 (INSTRUCCIONES2 -> EST_CONDICIONALES .)
    private_boolean reduce using rule 52 (INSTRUCCIONES2 -> EST_CONDICIONALES .)


state 64

    (53) INSTRUCCIONES2 -> EST_ITERATIVAS .

    llave_b         reduce using rule 53 (INSTRUCCIONES2 -> EST_ITERATIVAS .)
    identificador   reduce using rule 53 (INSTRUCCIONES2 -> EST_ITERATIVAS .)
    private_if      reduce using rule 53 (INSTRUCCIONES2 -> EST_ITERATIVAS .)
    private_while   reduce using rule 53 (INSTRUCCIONES2 -> EST_ITERATIVAS .)
    private_do      reduce using rule 53 (INSTRUCCIONES2 -> EST_ITERATIVAS .)
    private_break   reduce using rule 53 (INSTRUCCIONES2 -> EST_ITERATIVAS .)
    private_continue reduce using rule 53 (INSTRUCCIONES2 -> EST_ITERATIVAS .)
    private_void    reduce using rule 53 (INSTRUCCIONES2 -> EST_ITERATIVAS .)
    private_return  reduce using rule 53 (INSTRUCCIONES2 -> EST_ITERATIVAS .)
    private_int     reduce using rule 53 (INSTRUCCIONES2 -> EST_ITERATIVAS .)
    private_double  reduce using rule 53 (INSTRUCCIONES2 -> EST_ITERATIVAS .)
    private_string  reduce using rule 53 (INSTRUCCIONES2 -> EST_ITERATIVAS .)
    private_char    reduce using rule 53 (INSTRUCCIONES2 -> EST_ITERATIVAS .)
    private_boolean reduce using rule 53 (INSTRUCCIONES2 -> EST_ITERATIVAS .)


state 65

    (54) INSTRUCCIONES2 -> SENT_CFLUJO .

    llave_b         reduce using rule 54 (INSTRUCCIONES2 -> SENT_CFLUJO .)
    identificador   reduce using rule 54 (INSTRUCCIONES2 -> SENT_CFLUJO .)
    private_if      reduce using rule 54 (INSTRUCCIONES2 -> SENT_CFLUJO .)
    private_while   reduce using rule 54 (INSTRUCCIONES2 -> SENT_CFLUJO .)
    private_do      reduce using rule 54 (INSTRUCCIONES2 -> SENT_CFLUJO .)
    private_break   reduce using rule 54 (INSTRUCCIONES2 -> SENT_CFLUJO .)
    private_continue reduce using rule 54 (INSTRUCCIONES2 -> SENT_CFLUJO .)
    private_void    reduce using rule 54 (INSTRUCCIONES2 -> SENT_CFLUJO .)
    private_return  reduce using rule 54 (INSTRUCCIONES2 -> SENT_CFLUJO .)
    private_int     reduce using rule 54 (INSTRUCCIONES2 -> SENT_CFLUJO .)
    private_double  reduce using rule 54 (INSTRUCCIONES2 -> SENT_CFLUJO .)
    private_string  reduce using rule 54 (INSTRUCCIONES2 -> SENT_CFLUJO .)
    private_char    reduce using rule 54 (INSTRUCCIONES2 -> SENT_CFLUJO .)
    private_boolean reduce using rule 54 (INSTRUCCIONES2 -> SENT_CFLUJO .)


state 66

    (55) INSTRUCCIONES2 -> DEC_METODOS .

    llave_b         reduce using rule 55 (INSTRUCCIONES2 -> DEC_METODOS .)
    identificador   reduce using rule 55 (INSTRUCCIONES2 -> DEC_METODOS .)
    private_if      reduce using rule 55 (INSTRUCCIONES2 -> DEC_METODOS .)
    private_while   reduce using rule 55 (INSTRUCCIONES2 -> DEC_METODOS .)
    private_do      reduce using rule 55 (INSTRUCCIONES2 -> DEC_METODOS .)
    private_break   reduce using rule 55 (INSTRUCCIONES2 -> DEC_METODOS .)
    private_continue reduce using rule 55 (INSTRUCCIONES2 -> DEC_METODOS .)
    private_void    reduce using rule 55 (INSTRUCCIONES2 -> DEC_METODOS .)
    private_return  reduce using rule 55 (INSTRUCCIONES2 -> DEC_METODOS .)
    private_int     reduce using rule 55 (INSTRUCCIONES2 -> DEC_METODOS .)
    private_double  reduce using rule 55 (INSTRUCCIONES2 -> DEC_METODOS .)
    private_string  reduce using rule 55 (INSTRUCCIONES2 -> DEC_METODOS .)
    private_char    reduce using rule 55 (INSTRUCCIONES2 -> DEC_METODOS .)
    private_boolean reduce using rule 55 (INSTRUCCIONES2 -> DEC_METODOS .)


state 67

    (56) INSTRUCCIONES2 -> DEC_FUNCIONES .

    llave_b         reduce using rule 56 (INSTRUCCIONES2 -> DEC_FUNCIONES .)
    identificador   reduce using rule 56 (INSTRUCCIONES2 -> DEC_FUNCIONES .)
    private_if      reduce using rule 56 (INSTRUCCIONES2 -> DEC_FUNCIONES .)
    private_while   reduce using rule 56 (INSTRUCCIONES2 -> DEC_FUNCIONES .)
    private_do      reduce using rule 56 (INSTRUCCIONES2 -> DEC_FUNCIONES .)
    private_break   reduce using rule 56 (INSTRUCCIONES2 -> DEC_FUNCIONES .)
    private_continue reduce using rule 56 (INSTRUCCIONES2 -> DEC_FUNCIONES .)
    private_void    reduce using rule 56 (INSTRUCCIONES2 -> DEC_FUNCIONES .)
    private_return  reduce using rule 56 (INSTRUCCIONES2 -> DEC_FUNCIONES .)
    private_int     reduce using rule 56 (INSTRUCCIONES2 -> DEC_FUNCIONES .)
    private_double  reduce using rule 56 (INSTRUCCIONES2 -> DEC_FUNCIONES .)
    private_string  reduce using rule 56 (INSTRUCCIONES2 -> DEC_FUNCIONES .)
    private_char    reduce using rule 56 (INSTRUCCIONES2 -> DEC_FUNCIONES .)
    private_boolean reduce using rule 56 (INSTRUCCIONES2 -> DEC_FUNCIONES .)


state 68

    (57) INSTRUCCIONES2 -> RETORNO .

    llave_b         reduce using rule 57 (INSTRUCCIONES2 -> RETORNO .)
    identificador   reduce using rule 57 (INSTRUCCIONES2 -> RETORNO .)
    private_if      reduce using rule 57 (INSTRUCCIONES2 -> RETORNO .)
    private_while   reduce using rule 57 (INSTRUCCIONES2 -> RETORNO .)
    private_do      reduce using rule 57 (INSTRUCCIONES2 -> RETORNO .)
    private_break   reduce using rule 57 (INSTRUCCIONES2 -> RETORNO .)
    private_continue reduce using rule 57 (INSTRUCCIONES2 -> RETORNO .)
    private_void    reduce using rule 57 (INSTRUCCIONES2 -> RETORNO .)
    private_return  reduce using rule 57 (INSTRUCCIONES2 -> RETORNO .)
    private_int     reduce using rule 57 (INSTRUCCIONES2 -> RETORNO .)
    private_double  reduce using rule 57 (INSTRUCCIONES2 -> RETORNO .)
    private_string  reduce using rule 57 (INSTRUCCIONES2 -> RETORNO .)
    private_char    reduce using rule 57 (INSTRUCCIONES2 -> RETORNO .)
    private_boolean reduce using rule 57 (INSTRUCCIONES2 -> RETORNO .)


state 69

    (58) INSTRUCCIONES2 -> LLAMADA .

    llave_b         reduce using rule 58 (INSTRUCCIONES2 -> LLAMADA .)
    identificador   reduce using rule 58 (INSTRUCCIONES2 -> LLAMADA .)
    private_if      reduce using rule 58 (INSTRUCCIONES2 -> LLAMADA .)
    private_while   reduce using rule 58 (INSTRUCCIONES2 -> LLAMADA .)
    private_do      reduce using rule 58 (INSTRUCCIONES2 -> LLAMADA .)
    private_break   reduce using rule 58 (INSTRUCCIONES2 -> LLAMADA .)
    private_continue reduce using rule 58 (INSTRUCCIONES2 -> LLAMADA .)
    private_void    reduce using rule 58 (INSTRUCCIONES2 -> LLAMADA .)
    private_return  reduce using rule 58 (INSTRUCCIONES2 -> LLAMADA .)
    private_int     reduce using rule 58 (INSTRUCCIONES2 -> LLAMADA .)
    private_double  reduce using rule 58 (INSTRUCCIONES2 -> LLAMADA .)
    private_string  reduce using rule 58 (INSTRUCCIONES2 -> LLAMADA .)
    private_char    reduce using rule 58 (INSTRUCCIONES2 -> LLAMADA .)
    private_boolean reduce using rule 58 (INSTRUCCIONES2 -> LLAMADA .)


state 70

    (63) DEC_METODOS -> private_void identificador par_a . PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> private_void identificador par_a . par_b llave_a INSTRUCCIONS llave_b
    (65) PARAMETROS -> . PARAMETROS coma TIPO_DATO identificador
    (66) PARAMETROS -> . TIPO_DATO identificador
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    par_b           shift and go to state 99
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    PARAMETROS                     shift and go to state 98
    TIPO_DATO                      shift and go to state 73

state 71

    (70) RETORNO -> private_return DATO ptcoma .

    identificador   reduce using rule 70 (RETORNO -> private_return DATO ptcoma .)
    private_if      reduce using rule 70 (RETORNO -> private_return DATO ptcoma .)
    private_while   reduce using rule 70 (RETORNO -> private_return DATO ptcoma .)
    private_do      reduce using rule 70 (RETORNO -> private_return DATO ptcoma .)
    private_break   reduce using rule 70 (RETORNO -> private_return DATO ptcoma .)
    private_continue reduce using rule 70 (RETORNO -> private_return DATO ptcoma .)
    private_void    reduce using rule 70 (RETORNO -> private_return DATO ptcoma .)
    private_return  reduce using rule 70 (RETORNO -> private_return DATO ptcoma .)
    private_int     reduce using rule 70 (RETORNO -> private_return DATO ptcoma .)
    private_double  reduce using rule 70 (RETORNO -> private_return DATO ptcoma .)
    private_string  reduce using rule 70 (RETORNO -> private_return DATO ptcoma .)
    private_char    reduce using rule 70 (RETORNO -> private_return DATO ptcoma .)
    private_boolean reduce using rule 70 (RETORNO -> private_return DATO ptcoma .)
    $end            reduce using rule 70 (RETORNO -> private_return DATO ptcoma .)
    llave_b         reduce using rule 70 (RETORNO -> private_return DATO ptcoma .)


state 72

    (13) DEC_VAR -> TIPO_DATO identificador asignacion DATO . ptcoma

    ptcoma          shift and go to state 100


state 73

    (66) PARAMETROS -> TIPO_DATO . identificador

    identificador   shift and go to state 101


state 74

    (67) DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS . par_b llave_a INSTRUCCIONS llave_b
    (65) PARAMETROS -> PARAMETROS . coma TIPO_DATO identificador

    par_b           shift and go to state 102
    coma            shift and go to state 103


state 75

    (68) DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b . llave_a INSTRUCCIONS llave_b

    llave_a         shift and go to state 104


state 76

    (25) ASIG_VAR -> identificador asignacion DATO ptcoma .

    identificador   reduce using rule 25 (ASIG_VAR -> identificador asignacion DATO ptcoma .)
    private_if      reduce using rule 25 (ASIG_VAR -> identificador asignacion DATO ptcoma .)
    private_while   reduce using rule 25 (ASIG_VAR -> identificador asignacion DATO ptcoma .)
    private_do      reduce using rule 25 (ASIG_VAR -> identificador asignacion DATO ptcoma .)
    private_break   reduce using rule 25 (ASIG_VAR -> identificador asignacion DATO ptcoma .)
    private_continue reduce using rule 25 (ASIG_VAR -> identificador asignacion DATO ptcoma .)
    private_void    reduce using rule 25 (ASIG_VAR -> identificador asignacion DATO ptcoma .)
    private_return  reduce using rule 25 (ASIG_VAR -> identificador asignacion DATO ptcoma .)
    private_int     reduce using rule 25 (ASIG_VAR -> identificador asignacion DATO ptcoma .)
    private_double  reduce using rule 25 (ASIG_VAR -> identificador asignacion DATO ptcoma .)
    private_string  reduce using rule 25 (ASIG_VAR -> identificador asignacion DATO ptcoma .)
    private_char    reduce using rule 25 (ASIG_VAR -> identificador asignacion DATO ptcoma .)
    private_boolean reduce using rule 25 (ASIG_VAR -> identificador asignacion DATO ptcoma .)
    $end            reduce using rule 25 (ASIG_VAR -> identificador asignacion DATO ptcoma .)
    llave_b         reduce using rule 25 (ASIG_VAR -> identificador asignacion DATO ptcoma .)


state 77

    (71) LLAMADA -> identificador par_a ARGUMENTOS par_b .

    identificador   reduce using rule 71 (LLAMADA -> identificador par_a ARGUMENTOS par_b .)
    private_if      reduce using rule 71 (LLAMADA -> identificador par_a ARGUMENTOS par_b .)
    private_while   reduce using rule 71 (LLAMADA -> identificador par_a ARGUMENTOS par_b .)
    private_do      reduce using rule 71 (LLAMADA -> identificador par_a ARGUMENTOS par_b .)
    private_break   reduce using rule 71 (LLAMADA -> identificador par_a ARGUMENTOS par_b .)
    private_continue reduce using rule 71 (LLAMADA -> identificador par_a ARGUMENTOS par_b .)
    private_void    reduce using rule 71 (LLAMADA -> identificador par_a ARGUMENTOS par_b .)
    private_return  reduce using rule 71 (LLAMADA -> identificador par_a ARGUMENTOS par_b .)
    private_int     reduce using rule 71 (LLAMADA -> identificador par_a ARGUMENTOS par_b .)
    private_double  reduce using rule 71 (LLAMADA -> identificador par_a ARGUMENTOS par_b .)
    private_string  reduce using rule 71 (LLAMADA -> identificador par_a ARGUMENTOS par_b .)
    private_char    reduce using rule 71 (LLAMADA -> identificador par_a ARGUMENTOS par_b .)
    private_boolean reduce using rule 71 (LLAMADA -> identificador par_a ARGUMENTOS par_b .)
    $end            reduce using rule 71 (LLAMADA -> identificador par_a ARGUMENTOS par_b .)
    llave_b         reduce using rule 71 (LLAMADA -> identificador par_a ARGUMENTOS par_b .)


state 78

    (73) ARGUMENTOS -> ARGUMENTOS coma . DATO
    (19) DATO -> . entero
    (20) DATO -> . decimal
    (21) DATO -> . cadena
    (22) DATO -> . char
    (23) DATO -> . private_true
    (24) DATO -> . private_false

    entero          shift and go to state 39
    decimal         shift and go to state 40
    cadena          shift and go to state 41
    char            shift and go to state 42
    private_true    shift and go to state 43
    private_false   shift and go to state 44

    DATO                           shift and go to state 105

state 79

    (26) EST_CONDICIONALES -> private_if par_a OPERACION par_b . llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> private_if par_a OPERACION par_b . llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b

    llave_a         shift and go to state 106


state 80

    (28) OPERACION -> OPERACION E .
    (30) E -> E . oper_suma E
    (31) E -> E . oper_resta E
    (32) E -> E . oper_multiplicacion E
    (33) E -> E . oper_division E
    (34) E -> E . oper_resto E
    (35) E -> E . oper_igualacion E
    (36) E -> E . oper_diferenciacion E
    (37) E -> E . oper_mayor E
    (38) E -> E . oper_mayor_igual E
    (39) E -> E . oper_menor E
    (40) E -> E . oper_menor_igual E
    (41) E -> E . oper_and E
    (42) E -> E . oper_or E

    par_b           reduce using rule 28 (OPERACION -> OPERACION E .)
    oper_not        reduce using rule 28 (OPERACION -> OPERACION E .)
    identificador   reduce using rule 28 (OPERACION -> OPERACION E .)
    entero          reduce using rule 28 (OPERACION -> OPERACION E .)
    private_false   reduce using rule 28 (OPERACION -> OPERACION E .)
    private_true    reduce using rule 28 (OPERACION -> OPERACION E .)
    oper_suma       shift and go to state 81
    oper_resta      shift and go to state 82
    oper_multiplicacion shift and go to state 83
    oper_division   shift and go to state 84
    oper_resto      shift and go to state 85
    oper_igualacion shift and go to state 86
    oper_diferenciacion shift and go to state 87
    oper_mayor      shift and go to state 88
    oper_mayor_igual shift and go to state 89
    oper_menor      shift and go to state 90
    oper_menor_igual shift and go to state 91
    oper_and        shift and go to state 92
    oper_or         shift and go to state 93


state 81

    (30) E -> E oper_suma . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    E                              shift and go to state 107

state 82

    (31) E -> E oper_resta . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    E                              shift and go to state 108

state 83

    (32) E -> E oper_multiplicacion . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    E                              shift and go to state 109

state 84

    (33) E -> E oper_division . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    E                              shift and go to state 110

state 85

    (34) E -> E oper_resto . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    E                              shift and go to state 111

state 86

    (35) E -> E oper_igualacion . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    E                              shift and go to state 112

state 87

    (36) E -> E oper_diferenciacion . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    E                              shift and go to state 113

state 88

    (37) E -> E oper_mayor . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    E                              shift and go to state 114

state 89

    (38) E -> E oper_mayor_igual . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    E                              shift and go to state 115

state 90

    (39) E -> E oper_menor . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    E                              shift and go to state 116

state 91

    (40) E -> E oper_menor_igual . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    E                              shift and go to state 117

state 92

    (41) E -> E oper_and . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    E                              shift and go to state 118

state 93

    (42) E -> E oper_or . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    E                              shift and go to state 119

state 94

    (43) E -> oper_not E .
    (30) E -> E . oper_suma E
    (31) E -> E . oper_resta E
    (32) E -> E . oper_multiplicacion E
    (33) E -> E . oper_division E
    (34) E -> E . oper_resto E
    (35) E -> E . oper_igualacion E
    (36) E -> E . oper_diferenciacion E
    (37) E -> E . oper_mayor E
    (38) E -> E . oper_mayor_igual E
    (39) E -> E . oper_menor E
    (40) E -> E . oper_menor_igual E
    (41) E -> E . oper_and E
    (42) E -> E . oper_or E

    oper_suma       reduce using rule 43 (E -> oper_not E .)
    oper_resta      reduce using rule 43 (E -> oper_not E .)
    oper_multiplicacion reduce using rule 43 (E -> oper_not E .)
    oper_division   reduce using rule 43 (E -> oper_not E .)
    oper_resto      reduce using rule 43 (E -> oper_not E .)
    oper_igualacion reduce using rule 43 (E -> oper_not E .)
    oper_diferenciacion reduce using rule 43 (E -> oper_not E .)
    oper_mayor      reduce using rule 43 (E -> oper_not E .)
    oper_mayor_igual reduce using rule 43 (E -> oper_not E .)
    oper_menor      reduce using rule 43 (E -> oper_not E .)
    oper_menor_igual reduce using rule 43 (E -> oper_not E .)
    oper_and        reduce using rule 43 (E -> oper_not E .)
    oper_or         reduce using rule 43 (E -> oper_not E .)
    par_b           reduce using rule 43 (E -> oper_not E .)
    oper_not        reduce using rule 43 (E -> oper_not E .)
    identificador   reduce using rule 43 (E -> oper_not E .)
    entero          reduce using rule 43 (E -> oper_not E .)
    private_false   reduce using rule 43 (E -> oper_not E .)
    private_true    reduce using rule 43 (E -> oper_not E .)

  ! oper_suma       [ shift and go to state 81 ]
  ! oper_resta      [ shift and go to state 82 ]
  ! oper_multiplicacion [ shift and go to state 83 ]
  ! oper_division   [ shift and go to state 84 ]
  ! oper_resto      [ shift and go to state 85 ]
  ! oper_igualacion [ shift and go to state 86 ]
  ! oper_diferenciacion [ shift and go to state 87 ]
  ! oper_mayor      [ shift and go to state 88 ]
  ! oper_mayor_igual [ shift and go to state 89 ]
  ! oper_menor      [ shift and go to state 90 ]
  ! oper_menor_igual [ shift and go to state 91 ]
  ! oper_and        [ shift and go to state 92 ]
  ! oper_or         [ shift and go to state 93 ]


state 95

    (59) EST_ITERATIVAS -> private_while par_a OPERACION par_b . llave_a INSTRUCCIONS llave_b

    llave_a         shift and go to state 120


state 96

    (60) EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b . private_while par_a OPERACION par_b ptcoma

    private_while   shift and go to state 121


state 97

    (48) INSTRUCCIONS -> INSTRUCCIONS INSTRUCCIONES2 .

    llave_b         reduce using rule 48 (INSTRUCCIONS -> INSTRUCCIONS INSTRUCCIONES2 .)
    identificador   reduce using rule 48 (INSTRUCCIONS -> INSTRUCCIONS INSTRUCCIONES2 .)
    private_if      reduce using rule 48 (INSTRUCCIONS -> INSTRUCCIONS INSTRUCCIONES2 .)
    private_while   reduce using rule 48 (INSTRUCCIONS -> INSTRUCCIONS INSTRUCCIONES2 .)
    private_do      reduce using rule 48 (INSTRUCCIONS -> INSTRUCCIONS INSTRUCCIONES2 .)
    private_break   reduce using rule 48 (INSTRUCCIONS -> INSTRUCCIONS INSTRUCCIONES2 .)
    private_continue reduce using rule 48 (INSTRUCCIONS -> INSTRUCCIONS INSTRUCCIONES2 .)
    private_void    reduce using rule 48 (INSTRUCCIONS -> INSTRUCCIONS INSTRUCCIONES2 .)
    private_return  reduce using rule 48 (INSTRUCCIONS -> INSTRUCCIONS INSTRUCCIONES2 .)
    private_int     reduce using rule 48 (INSTRUCCIONS -> INSTRUCCIONS INSTRUCCIONES2 .)
    private_double  reduce using rule 48 (INSTRUCCIONS -> INSTRUCCIONS INSTRUCCIONES2 .)
    private_string  reduce using rule 48 (INSTRUCCIONS -> INSTRUCCIONS INSTRUCCIONES2 .)
    private_char    reduce using rule 48 (INSTRUCCIONS -> INSTRUCCIONS INSTRUCCIONES2 .)
    private_boolean reduce using rule 48 (INSTRUCCIONS -> INSTRUCCIONS INSTRUCCIONES2 .)


state 98

    (63) DEC_METODOS -> private_void identificador par_a PARAMETROS . par_b llave_a INSTRUCCIONS llave_b
    (65) PARAMETROS -> PARAMETROS . coma TIPO_DATO identificador

    par_b           shift and go to state 122
    coma            shift and go to state 103


state 99

    (64) DEC_METODOS -> private_void identificador par_a par_b . llave_a INSTRUCCIONS llave_b

    llave_a         shift and go to state 123


state 100

    (13) DEC_VAR -> TIPO_DATO identificador asignacion DATO ptcoma .

    identificador   reduce using rule 13 (DEC_VAR -> TIPO_DATO identificador asignacion DATO ptcoma .)
    private_if      reduce using rule 13 (DEC_VAR -> TIPO_DATO identificador asignacion DATO ptcoma .)
    private_while   reduce using rule 13 (DEC_VAR -> TIPO_DATO identificador asignacion DATO ptcoma .)
    private_do      reduce using rule 13 (DEC_VAR -> TIPO_DATO identificador asignacion DATO ptcoma .)
    private_break   reduce using rule 13 (DEC_VAR -> TIPO_DATO identificador asignacion DATO ptcoma .)
    private_continue reduce using rule 13 (DEC_VAR -> TIPO_DATO identificador asignacion DATO ptcoma .)
    private_void    reduce using rule 13 (DEC_VAR -> TIPO_DATO identificador asignacion DATO ptcoma .)
    private_return  reduce using rule 13 (DEC_VAR -> TIPO_DATO identificador asignacion DATO ptcoma .)
    private_int     reduce using rule 13 (DEC_VAR -> TIPO_DATO identificador asignacion DATO ptcoma .)
    private_double  reduce using rule 13 (DEC_VAR -> TIPO_DATO identificador asignacion DATO ptcoma .)
    private_string  reduce using rule 13 (DEC_VAR -> TIPO_DATO identificador asignacion DATO ptcoma .)
    private_char    reduce using rule 13 (DEC_VAR -> TIPO_DATO identificador asignacion DATO ptcoma .)
    private_boolean reduce using rule 13 (DEC_VAR -> TIPO_DATO identificador asignacion DATO ptcoma .)
    $end            reduce using rule 13 (DEC_VAR -> TIPO_DATO identificador asignacion DATO ptcoma .)
    llave_b         reduce using rule 13 (DEC_VAR -> TIPO_DATO identificador asignacion DATO ptcoma .)


state 101

    (66) PARAMETROS -> TIPO_DATO identificador .

    par_b           reduce using rule 66 (PARAMETROS -> TIPO_DATO identificador .)
    coma            reduce using rule 66 (PARAMETROS -> TIPO_DATO identificador .)


state 102

    (67) DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b . llave_a INSTRUCCIONS llave_b

    llave_a         shift and go to state 124


state 103

    (65) PARAMETROS -> PARAMETROS coma . TIPO_DATO identificador
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    TIPO_DATO                      shift and go to state 125

state 104

    (68) DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a . INSTRUCCIONS llave_b
    (48) INSTRUCCIONS -> . INSTRUCCIONS INSTRUCCIONES2
    (49) INSTRUCCIONS -> . INSTRUCCIONES2
    (50) INSTRUCCIONES2 -> . DEC_VAR
    (51) INSTRUCCIONES2 -> . ASIG_VAR
    (52) INSTRUCCIONES2 -> . EST_CONDICIONALES
    (53) INSTRUCCIONES2 -> . EST_ITERATIVAS
    (54) INSTRUCCIONES2 -> . SENT_CFLUJO
    (55) INSTRUCCIONES2 -> . DEC_METODOS
    (56) INSTRUCCIONES2 -> . DEC_FUNCIONES
    (57) INSTRUCCIONES2 -> . RETORNO
    (58) INSTRUCCIONES2 -> . LLAMADA
    (13) DEC_VAR -> . TIPO_DATO identificador asignacion DATO ptcoma
    (25) ASIG_VAR -> . identificador asignacion DATO ptcoma
    (26) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (59) EST_ITERATIVAS -> . private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (60) EST_ITERATIVAS -> . private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (61) SENT_CFLUJO -> . private_break ptcoma
    (62) SENT_CFLUJO -> . private_continue ptcoma
    (63) DEC_METODOS -> . private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> . private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (67) DEC_FUNCIONES -> . TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> . TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (69) RETORNO -> . private_return ptcoma
    (70) RETORNO -> . private_return DATO ptcoma
    (71) LLAMADA -> . identificador par_a ARGUMENTOS par_b
    (72) LLAMADA -> . identificador par_a par_b
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    identificador   shift and go to state 14
    private_if      shift and go to state 15
    private_while   shift and go to state 16
    private_do      shift and go to state 17
    private_break   shift and go to state 18
    private_continue shift and go to state 19
    private_void    shift and go to state 20
    private_return  shift and go to state 21
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    TIPO_DATO                      shift and go to state 13
    INSTRUCCIONS                   shift and go to state 126
    INSTRUCCIONES2                 shift and go to state 60
    DEC_VAR                        shift and go to state 61
    ASIG_VAR                       shift and go to state 62
    EST_CONDICIONALES              shift and go to state 63
    EST_ITERATIVAS                 shift and go to state 64
    SENT_CFLUJO                    shift and go to state 65
    DEC_METODOS                    shift and go to state 66
    DEC_FUNCIONES                  shift and go to state 67
    RETORNO                        shift and go to state 68
    LLAMADA                        shift and go to state 69

state 105

    (73) ARGUMENTOS -> ARGUMENTOS coma DATO .

    par_b           reduce using rule 73 (ARGUMENTOS -> ARGUMENTOS coma DATO .)
    coma            reduce using rule 73 (ARGUMENTOS -> ARGUMENTOS coma DATO .)


state 106

    (26) EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a . INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a . INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (48) INSTRUCCIONS -> . INSTRUCCIONS INSTRUCCIONES2
    (49) INSTRUCCIONS -> . INSTRUCCIONES2
    (50) INSTRUCCIONES2 -> . DEC_VAR
    (51) INSTRUCCIONES2 -> . ASIG_VAR
    (52) INSTRUCCIONES2 -> . EST_CONDICIONALES
    (53) INSTRUCCIONES2 -> . EST_ITERATIVAS
    (54) INSTRUCCIONES2 -> . SENT_CFLUJO
    (55) INSTRUCCIONES2 -> . DEC_METODOS
    (56) INSTRUCCIONES2 -> . DEC_FUNCIONES
    (57) INSTRUCCIONES2 -> . RETORNO
    (58) INSTRUCCIONES2 -> . LLAMADA
    (13) DEC_VAR -> . TIPO_DATO identificador asignacion DATO ptcoma
    (25) ASIG_VAR -> . identificador asignacion DATO ptcoma
    (26) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (59) EST_ITERATIVAS -> . private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (60) EST_ITERATIVAS -> . private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (61) SENT_CFLUJO -> . private_break ptcoma
    (62) SENT_CFLUJO -> . private_continue ptcoma
    (63) DEC_METODOS -> . private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> . private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (67) DEC_FUNCIONES -> . TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> . TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (69) RETORNO -> . private_return ptcoma
    (70) RETORNO -> . private_return DATO ptcoma
    (71) LLAMADA -> . identificador par_a ARGUMENTOS par_b
    (72) LLAMADA -> . identificador par_a par_b
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    identificador   shift and go to state 14
    private_if      shift and go to state 15
    private_while   shift and go to state 16
    private_do      shift and go to state 17
    private_break   shift and go to state 18
    private_continue shift and go to state 19
    private_void    shift and go to state 20
    private_return  shift and go to state 21
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    INSTRUCCIONS                   shift and go to state 127
    INSTRUCCIONES2                 shift and go to state 60
    DEC_VAR                        shift and go to state 61
    ASIG_VAR                       shift and go to state 62
    EST_CONDICIONALES              shift and go to state 63
    EST_ITERATIVAS                 shift and go to state 64
    SENT_CFLUJO                    shift and go to state 65
    DEC_METODOS                    shift and go to state 66
    DEC_FUNCIONES                  shift and go to state 67
    RETORNO                        shift and go to state 68
    LLAMADA                        shift and go to state 69
    TIPO_DATO                      shift and go to state 13

state 107

    (30) E -> E oper_suma E .
    (30) E -> E . oper_suma E
    (31) E -> E . oper_resta E
    (32) E -> E . oper_multiplicacion E
    (33) E -> E . oper_division E
    (34) E -> E . oper_resto E
    (35) E -> E . oper_igualacion E
    (36) E -> E . oper_diferenciacion E
    (37) E -> E . oper_mayor E
    (38) E -> E . oper_mayor_igual E
    (39) E -> E . oper_menor E
    (40) E -> E . oper_menor_igual E
    (41) E -> E . oper_and E
    (42) E -> E . oper_or E

    oper_suma       reduce using rule 30 (E -> E oper_suma E .)
    oper_resta      reduce using rule 30 (E -> E oper_suma E .)
    oper_igualacion reduce using rule 30 (E -> E oper_suma E .)
    oper_diferenciacion reduce using rule 30 (E -> E oper_suma E .)
    oper_mayor      reduce using rule 30 (E -> E oper_suma E .)
    oper_mayor_igual reduce using rule 30 (E -> E oper_suma E .)
    oper_menor      reduce using rule 30 (E -> E oper_suma E .)
    oper_menor_igual reduce using rule 30 (E -> E oper_suma E .)
    oper_and        reduce using rule 30 (E -> E oper_suma E .)
    oper_or         reduce using rule 30 (E -> E oper_suma E .)
    par_b           reduce using rule 30 (E -> E oper_suma E .)
    oper_not        reduce using rule 30 (E -> E oper_suma E .)
    identificador   reduce using rule 30 (E -> E oper_suma E .)
    entero          reduce using rule 30 (E -> E oper_suma E .)
    private_false   reduce using rule 30 (E -> E oper_suma E .)
    private_true    reduce using rule 30 (E -> E oper_suma E .)
    oper_multiplicacion shift and go to state 83
    oper_division   shift and go to state 84
    oper_resto      shift and go to state 85

  ! oper_multiplicacion [ reduce using rule 30 (E -> E oper_suma E .) ]
  ! oper_division   [ reduce using rule 30 (E -> E oper_suma E .) ]
  ! oper_resto      [ reduce using rule 30 (E -> E oper_suma E .) ]
  ! oper_suma       [ shift and go to state 81 ]
  ! oper_resta      [ shift and go to state 82 ]
  ! oper_igualacion [ shift and go to state 86 ]
  ! oper_diferenciacion [ shift and go to state 87 ]
  ! oper_mayor      [ shift and go to state 88 ]
  ! oper_mayor_igual [ shift and go to state 89 ]
  ! oper_menor      [ shift and go to state 90 ]
  ! oper_menor_igual [ shift and go to state 91 ]
  ! oper_and        [ shift and go to state 92 ]
  ! oper_or         [ shift and go to state 93 ]


state 108

    (31) E -> E oper_resta E .
    (30) E -> E . oper_suma E
    (31) E -> E . oper_resta E
    (32) E -> E . oper_multiplicacion E
    (33) E -> E . oper_division E
    (34) E -> E . oper_resto E
    (35) E -> E . oper_igualacion E
    (36) E -> E . oper_diferenciacion E
    (37) E -> E . oper_mayor E
    (38) E -> E . oper_mayor_igual E
    (39) E -> E . oper_menor E
    (40) E -> E . oper_menor_igual E
    (41) E -> E . oper_and E
    (42) E -> E . oper_or E

    oper_suma       reduce using rule 31 (E -> E oper_resta E .)
    oper_resta      reduce using rule 31 (E -> E oper_resta E .)
    oper_igualacion reduce using rule 31 (E -> E oper_resta E .)
    oper_diferenciacion reduce using rule 31 (E -> E oper_resta E .)
    oper_mayor      reduce using rule 31 (E -> E oper_resta E .)
    oper_mayor_igual reduce using rule 31 (E -> E oper_resta E .)
    oper_menor      reduce using rule 31 (E -> E oper_resta E .)
    oper_menor_igual reduce using rule 31 (E -> E oper_resta E .)
    oper_and        reduce using rule 31 (E -> E oper_resta E .)
    oper_or         reduce using rule 31 (E -> E oper_resta E .)
    par_b           reduce using rule 31 (E -> E oper_resta E .)
    oper_not        reduce using rule 31 (E -> E oper_resta E .)
    identificador   reduce using rule 31 (E -> E oper_resta E .)
    entero          reduce using rule 31 (E -> E oper_resta E .)
    private_false   reduce using rule 31 (E -> E oper_resta E .)
    private_true    reduce using rule 31 (E -> E oper_resta E .)
    oper_multiplicacion shift and go to state 83
    oper_division   shift and go to state 84
    oper_resto      shift and go to state 85

  ! oper_multiplicacion [ reduce using rule 31 (E -> E oper_resta E .) ]
  ! oper_division   [ reduce using rule 31 (E -> E oper_resta E .) ]
  ! oper_resto      [ reduce using rule 31 (E -> E oper_resta E .) ]
  ! oper_suma       [ shift and go to state 81 ]
  ! oper_resta      [ shift and go to state 82 ]
  ! oper_igualacion [ shift and go to state 86 ]
  ! oper_diferenciacion [ shift and go to state 87 ]
  ! oper_mayor      [ shift and go to state 88 ]
  ! oper_mayor_igual [ shift and go to state 89 ]
  ! oper_menor      [ shift and go to state 90 ]
  ! oper_menor_igual [ shift and go to state 91 ]
  ! oper_and        [ shift and go to state 92 ]
  ! oper_or         [ shift and go to state 93 ]


state 109

    (32) E -> E oper_multiplicacion E .
    (30) E -> E . oper_suma E
    (31) E -> E . oper_resta E
    (32) E -> E . oper_multiplicacion E
    (33) E -> E . oper_division E
    (34) E -> E . oper_resto E
    (35) E -> E . oper_igualacion E
    (36) E -> E . oper_diferenciacion E
    (37) E -> E . oper_mayor E
    (38) E -> E . oper_mayor_igual E
    (39) E -> E . oper_menor E
    (40) E -> E . oper_menor_igual E
    (41) E -> E . oper_and E
    (42) E -> E . oper_or E

    oper_suma       reduce using rule 32 (E -> E oper_multiplicacion E .)
    oper_resta      reduce using rule 32 (E -> E oper_multiplicacion E .)
    oper_multiplicacion reduce using rule 32 (E -> E oper_multiplicacion E .)
    oper_division   reduce using rule 32 (E -> E oper_multiplicacion E .)
    oper_resto      reduce using rule 32 (E -> E oper_multiplicacion E .)
    oper_igualacion reduce using rule 32 (E -> E oper_multiplicacion E .)
    oper_diferenciacion reduce using rule 32 (E -> E oper_multiplicacion E .)
    oper_mayor      reduce using rule 32 (E -> E oper_multiplicacion E .)
    oper_mayor_igual reduce using rule 32 (E -> E oper_multiplicacion E .)
    oper_menor      reduce using rule 32 (E -> E oper_multiplicacion E .)
    oper_menor_igual reduce using rule 32 (E -> E oper_multiplicacion E .)
    oper_and        reduce using rule 32 (E -> E oper_multiplicacion E .)
    oper_or         reduce using rule 32 (E -> E oper_multiplicacion E .)
    par_b           reduce using rule 32 (E -> E oper_multiplicacion E .)
    oper_not        reduce using rule 32 (E -> E oper_multiplicacion E .)
    identificador   reduce using rule 32 (E -> E oper_multiplicacion E .)
    entero          reduce using rule 32 (E -> E oper_multiplicacion E .)
    private_false   reduce using rule 32 (E -> E oper_multiplicacion E .)
    private_true    reduce using rule 32 (E -> E oper_multiplicacion E .)

  ! oper_suma       [ shift and go to state 81 ]
  ! oper_resta      [ shift and go to state 82 ]
  ! oper_multiplicacion [ shift and go to state 83 ]
  ! oper_division   [ shift and go to state 84 ]
  ! oper_resto      [ shift and go to state 85 ]
  ! oper_igualacion [ shift and go to state 86 ]
  ! oper_diferenciacion [ shift and go to state 87 ]
  ! oper_mayor      [ shift and go to state 88 ]
  ! oper_mayor_igual [ shift and go to state 89 ]
  ! oper_menor      [ shift and go to state 90 ]
  ! oper_menor_igual [ shift and go to state 91 ]
  ! oper_and        [ shift and go to state 92 ]
  ! oper_or         [ shift and go to state 93 ]


state 110

    (33) E -> E oper_division E .
    (30) E -> E . oper_suma E
    (31) E -> E . oper_resta E
    (32) E -> E . oper_multiplicacion E
    (33) E -> E . oper_division E
    (34) E -> E . oper_resto E
    (35) E -> E . oper_igualacion E
    (36) E -> E . oper_diferenciacion E
    (37) E -> E . oper_mayor E
    (38) E -> E . oper_mayor_igual E
    (39) E -> E . oper_menor E
    (40) E -> E . oper_menor_igual E
    (41) E -> E . oper_and E
    (42) E -> E . oper_or E

    oper_suma       reduce using rule 33 (E -> E oper_division E .)
    oper_resta      reduce using rule 33 (E -> E oper_division E .)
    oper_multiplicacion reduce using rule 33 (E -> E oper_division E .)
    oper_division   reduce using rule 33 (E -> E oper_division E .)
    oper_resto      reduce using rule 33 (E -> E oper_division E .)
    oper_igualacion reduce using rule 33 (E -> E oper_division E .)
    oper_diferenciacion reduce using rule 33 (E -> E oper_division E .)
    oper_mayor      reduce using rule 33 (E -> E oper_division E .)
    oper_mayor_igual reduce using rule 33 (E -> E oper_division E .)
    oper_menor      reduce using rule 33 (E -> E oper_division E .)
    oper_menor_igual reduce using rule 33 (E -> E oper_division E .)
    oper_and        reduce using rule 33 (E -> E oper_division E .)
    oper_or         reduce using rule 33 (E -> E oper_division E .)
    par_b           reduce using rule 33 (E -> E oper_division E .)
    oper_not        reduce using rule 33 (E -> E oper_division E .)
    identificador   reduce using rule 33 (E -> E oper_division E .)
    entero          reduce using rule 33 (E -> E oper_division E .)
    private_false   reduce using rule 33 (E -> E oper_division E .)
    private_true    reduce using rule 33 (E -> E oper_division E .)

  ! oper_suma       [ shift and go to state 81 ]
  ! oper_resta      [ shift and go to state 82 ]
  ! oper_multiplicacion [ shift and go to state 83 ]
  ! oper_division   [ shift and go to state 84 ]
  ! oper_resto      [ shift and go to state 85 ]
  ! oper_igualacion [ shift and go to state 86 ]
  ! oper_diferenciacion [ shift and go to state 87 ]
  ! oper_mayor      [ shift and go to state 88 ]
  ! oper_mayor_igual [ shift and go to state 89 ]
  ! oper_menor      [ shift and go to state 90 ]
  ! oper_menor_igual [ shift and go to state 91 ]
  ! oper_and        [ shift and go to state 92 ]
  ! oper_or         [ shift and go to state 93 ]


state 111

    (34) E -> E oper_resto E .
    (30) E -> E . oper_suma E
    (31) E -> E . oper_resta E
    (32) E -> E . oper_multiplicacion E
    (33) E -> E . oper_division E
    (34) E -> E . oper_resto E
    (35) E -> E . oper_igualacion E
    (36) E -> E . oper_diferenciacion E
    (37) E -> E . oper_mayor E
    (38) E -> E . oper_mayor_igual E
    (39) E -> E . oper_menor E
    (40) E -> E . oper_menor_igual E
    (41) E -> E . oper_and E
    (42) E -> E . oper_or E

    oper_suma       reduce using rule 34 (E -> E oper_resto E .)
    oper_resta      reduce using rule 34 (E -> E oper_resto E .)
    oper_multiplicacion reduce using rule 34 (E -> E oper_resto E .)
    oper_division   reduce using rule 34 (E -> E oper_resto E .)
    oper_resto      reduce using rule 34 (E -> E oper_resto E .)
    oper_igualacion reduce using rule 34 (E -> E oper_resto E .)
    oper_diferenciacion reduce using rule 34 (E -> E oper_resto E .)
    oper_mayor      reduce using rule 34 (E -> E oper_resto E .)
    oper_mayor_igual reduce using rule 34 (E -> E oper_resto E .)
    oper_menor      reduce using rule 34 (E -> E oper_resto E .)
    oper_menor_igual reduce using rule 34 (E -> E oper_resto E .)
    oper_and        reduce using rule 34 (E -> E oper_resto E .)
    oper_or         reduce using rule 34 (E -> E oper_resto E .)
    par_b           reduce using rule 34 (E -> E oper_resto E .)
    oper_not        reduce using rule 34 (E -> E oper_resto E .)
    identificador   reduce using rule 34 (E -> E oper_resto E .)
    entero          reduce using rule 34 (E -> E oper_resto E .)
    private_false   reduce using rule 34 (E -> E oper_resto E .)
    private_true    reduce using rule 34 (E -> E oper_resto E .)

  ! oper_suma       [ shift and go to state 81 ]
  ! oper_resta      [ shift and go to state 82 ]
  ! oper_multiplicacion [ shift and go to state 83 ]
  ! oper_division   [ shift and go to state 84 ]
  ! oper_resto      [ shift and go to state 85 ]
  ! oper_igualacion [ shift and go to state 86 ]
  ! oper_diferenciacion [ shift and go to state 87 ]
  ! oper_mayor      [ shift and go to state 88 ]
  ! oper_mayor_igual [ shift and go to state 89 ]
  ! oper_menor      [ shift and go to state 90 ]
  ! oper_menor_igual [ shift and go to state 91 ]
  ! oper_and        [ shift and go to state 92 ]
  ! oper_or         [ shift and go to state 93 ]


state 112

    (35) E -> E oper_igualacion E .
    (30) E -> E . oper_suma E
    (31) E -> E . oper_resta E
    (32) E -> E . oper_multiplicacion E
    (33) E -> E . oper_division E
    (34) E -> E . oper_resto E
    (35) E -> E . oper_igualacion E
    (36) E -> E . oper_diferenciacion E
    (37) E -> E . oper_mayor E
    (38) E -> E . oper_mayor_igual E
    (39) E -> E . oper_menor E
    (40) E -> E . oper_menor_igual E
    (41) E -> E . oper_and E
    (42) E -> E . oper_or E

    oper_igualacion reduce using rule 35 (E -> E oper_igualacion E .)
    oper_diferenciacion reduce using rule 35 (E -> E oper_igualacion E .)
    oper_and        reduce using rule 35 (E -> E oper_igualacion E .)
    oper_or         reduce using rule 35 (E -> E oper_igualacion E .)
    par_b           reduce using rule 35 (E -> E oper_igualacion E .)
    oper_not        reduce using rule 35 (E -> E oper_igualacion E .)
    identificador   reduce using rule 35 (E -> E oper_igualacion E .)
    entero          reduce using rule 35 (E -> E oper_igualacion E .)
    private_false   reduce using rule 35 (E -> E oper_igualacion E .)
    private_true    reduce using rule 35 (E -> E oper_igualacion E .)
    oper_suma       shift and go to state 81
    oper_resta      shift and go to state 82
    oper_multiplicacion shift and go to state 83
    oper_division   shift and go to state 84
    oper_resto      shift and go to state 85
    oper_mayor      shift and go to state 88
    oper_mayor_igual shift and go to state 89
    oper_menor      shift and go to state 90
    oper_menor_igual shift and go to state 91

  ! oper_suma       [ reduce using rule 35 (E -> E oper_igualacion E .) ]
  ! oper_resta      [ reduce using rule 35 (E -> E oper_igualacion E .) ]
  ! oper_multiplicacion [ reduce using rule 35 (E -> E oper_igualacion E .) ]
  ! oper_division   [ reduce using rule 35 (E -> E oper_igualacion E .) ]
  ! oper_resto      [ reduce using rule 35 (E -> E oper_igualacion E .) ]
  ! oper_mayor      [ reduce using rule 35 (E -> E oper_igualacion E .) ]
  ! oper_mayor_igual [ reduce using rule 35 (E -> E oper_igualacion E .) ]
  ! oper_menor      [ reduce using rule 35 (E -> E oper_igualacion E .) ]
  ! oper_menor_igual [ reduce using rule 35 (E -> E oper_igualacion E .) ]
  ! oper_igualacion [ shift and go to state 86 ]
  ! oper_diferenciacion [ shift and go to state 87 ]
  ! oper_and        [ shift and go to state 92 ]
  ! oper_or         [ shift and go to state 93 ]


state 113

    (36) E -> E oper_diferenciacion E .
    (30) E -> E . oper_suma E
    (31) E -> E . oper_resta E
    (32) E -> E . oper_multiplicacion E
    (33) E -> E . oper_division E
    (34) E -> E . oper_resto E
    (35) E -> E . oper_igualacion E
    (36) E -> E . oper_diferenciacion E
    (37) E -> E . oper_mayor E
    (38) E -> E . oper_mayor_igual E
    (39) E -> E . oper_menor E
    (40) E -> E . oper_menor_igual E
    (41) E -> E . oper_and E
    (42) E -> E . oper_or E

    oper_igualacion reduce using rule 36 (E -> E oper_diferenciacion E .)
    oper_diferenciacion reduce using rule 36 (E -> E oper_diferenciacion E .)
    oper_and        reduce using rule 36 (E -> E oper_diferenciacion E .)
    oper_or         reduce using rule 36 (E -> E oper_diferenciacion E .)
    par_b           reduce using rule 36 (E -> E oper_diferenciacion E .)
    oper_not        reduce using rule 36 (E -> E oper_diferenciacion E .)
    identificador   reduce using rule 36 (E -> E oper_diferenciacion E .)
    entero          reduce using rule 36 (E -> E oper_diferenciacion E .)
    private_false   reduce using rule 36 (E -> E oper_diferenciacion E .)
    private_true    reduce using rule 36 (E -> E oper_diferenciacion E .)
    oper_suma       shift and go to state 81
    oper_resta      shift and go to state 82
    oper_multiplicacion shift and go to state 83
    oper_division   shift and go to state 84
    oper_resto      shift and go to state 85
    oper_mayor      shift and go to state 88
    oper_mayor_igual shift and go to state 89
    oper_menor      shift and go to state 90
    oper_menor_igual shift and go to state 91

  ! oper_suma       [ reduce using rule 36 (E -> E oper_diferenciacion E .) ]
  ! oper_resta      [ reduce using rule 36 (E -> E oper_diferenciacion E .) ]
  ! oper_multiplicacion [ reduce using rule 36 (E -> E oper_diferenciacion E .) ]
  ! oper_division   [ reduce using rule 36 (E -> E oper_diferenciacion E .) ]
  ! oper_resto      [ reduce using rule 36 (E -> E oper_diferenciacion E .) ]
  ! oper_mayor      [ reduce using rule 36 (E -> E oper_diferenciacion E .) ]
  ! oper_mayor_igual [ reduce using rule 36 (E -> E oper_diferenciacion E .) ]
  ! oper_menor      [ reduce using rule 36 (E -> E oper_diferenciacion E .) ]
  ! oper_menor_igual [ reduce using rule 36 (E -> E oper_diferenciacion E .) ]
  ! oper_igualacion [ shift and go to state 86 ]
  ! oper_diferenciacion [ shift and go to state 87 ]
  ! oper_and        [ shift and go to state 92 ]
  ! oper_or         [ shift and go to state 93 ]


state 114

    (37) E -> E oper_mayor E .
    (30) E -> E . oper_suma E
    (31) E -> E . oper_resta E
    (32) E -> E . oper_multiplicacion E
    (33) E -> E . oper_division E
    (34) E -> E . oper_resto E
    (35) E -> E . oper_igualacion E
    (36) E -> E . oper_diferenciacion E
    (37) E -> E . oper_mayor E
    (38) E -> E . oper_mayor_igual E
    (39) E -> E . oper_menor E
    (40) E -> E . oper_menor_igual E
    (41) E -> E . oper_and E
    (42) E -> E . oper_or E

    oper_igualacion reduce using rule 37 (E -> E oper_mayor E .)
    oper_diferenciacion reduce using rule 37 (E -> E oper_mayor E .)
    oper_mayor      reduce using rule 37 (E -> E oper_mayor E .)
    oper_mayor_igual reduce using rule 37 (E -> E oper_mayor E .)
    oper_menor      reduce using rule 37 (E -> E oper_mayor E .)
    oper_menor_igual reduce using rule 37 (E -> E oper_mayor E .)
    oper_and        reduce using rule 37 (E -> E oper_mayor E .)
    oper_or         reduce using rule 37 (E -> E oper_mayor E .)
    par_b           reduce using rule 37 (E -> E oper_mayor E .)
    oper_not        reduce using rule 37 (E -> E oper_mayor E .)
    identificador   reduce using rule 37 (E -> E oper_mayor E .)
    entero          reduce using rule 37 (E -> E oper_mayor E .)
    private_false   reduce using rule 37 (E -> E oper_mayor E .)
    private_true    reduce using rule 37 (E -> E oper_mayor E .)
    oper_suma       shift and go to state 81
    oper_resta      shift and go to state 82
    oper_multiplicacion shift and go to state 83
    oper_division   shift and go to state 84
    oper_resto      shift and go to state 85

  ! oper_suma       [ reduce using rule 37 (E -> E oper_mayor E .) ]
  ! oper_resta      [ reduce using rule 37 (E -> E oper_mayor E .) ]
  ! oper_multiplicacion [ reduce using rule 37 (E -> E oper_mayor E .) ]
  ! oper_division   [ reduce using rule 37 (E -> E oper_mayor E .) ]
  ! oper_resto      [ reduce using rule 37 (E -> E oper_mayor E .) ]
  ! oper_igualacion [ shift and go to state 86 ]
  ! oper_diferenciacion [ shift and go to state 87 ]
  ! oper_mayor      [ shift and go to state 88 ]
  ! oper_mayor_igual [ shift and go to state 89 ]
  ! oper_menor      [ shift and go to state 90 ]
  ! oper_menor_igual [ shift and go to state 91 ]
  ! oper_and        [ shift and go to state 92 ]
  ! oper_or         [ shift and go to state 93 ]


state 115

    (38) E -> E oper_mayor_igual E .
    (30) E -> E . oper_suma E
    (31) E -> E . oper_resta E
    (32) E -> E . oper_multiplicacion E
    (33) E -> E . oper_division E
    (34) E -> E . oper_resto E
    (35) E -> E . oper_igualacion E
    (36) E -> E . oper_diferenciacion E
    (37) E -> E . oper_mayor E
    (38) E -> E . oper_mayor_igual E
    (39) E -> E . oper_menor E
    (40) E -> E . oper_menor_igual E
    (41) E -> E . oper_and E
    (42) E -> E . oper_or E

    oper_igualacion reduce using rule 38 (E -> E oper_mayor_igual E .)
    oper_diferenciacion reduce using rule 38 (E -> E oper_mayor_igual E .)
    oper_mayor      reduce using rule 38 (E -> E oper_mayor_igual E .)
    oper_mayor_igual reduce using rule 38 (E -> E oper_mayor_igual E .)
    oper_menor      reduce using rule 38 (E -> E oper_mayor_igual E .)
    oper_menor_igual reduce using rule 38 (E -> E oper_mayor_igual E .)
    oper_and        reduce using rule 38 (E -> E oper_mayor_igual E .)
    oper_or         reduce using rule 38 (E -> E oper_mayor_igual E .)
    par_b           reduce using rule 38 (E -> E oper_mayor_igual E .)
    oper_not        reduce using rule 38 (E -> E oper_mayor_igual E .)
    identificador   reduce using rule 38 (E -> E oper_mayor_igual E .)
    entero          reduce using rule 38 (E -> E oper_mayor_igual E .)
    private_false   reduce using rule 38 (E -> E oper_mayor_igual E .)
    private_true    reduce using rule 38 (E -> E oper_mayor_igual E .)
    oper_suma       shift and go to state 81
    oper_resta      shift and go to state 82
    oper_multiplicacion shift and go to state 83
    oper_division   shift and go to state 84
    oper_resto      shift and go to state 85

  ! oper_suma       [ reduce using rule 38 (E -> E oper_mayor_igual E .) ]
  ! oper_resta      [ reduce using rule 38 (E -> E oper_mayor_igual E .) ]
  ! oper_multiplicacion [ reduce using rule 38 (E -> E oper_mayor_igual E .) ]
  ! oper_division   [ reduce using rule 38 (E -> E oper_mayor_igual E .) ]
  ! oper_resto      [ reduce using rule 38 (E -> E oper_mayor_igual E .) ]
  ! oper_igualacion [ shift and go to state 86 ]
  ! oper_diferenciacion [ shift and go to state 87 ]
  ! oper_mayor      [ shift and go to state 88 ]
  ! oper_mayor_igual [ shift and go to state 89 ]
  ! oper_menor      [ shift and go to state 90 ]
  ! oper_menor_igual [ shift and go to state 91 ]
  ! oper_and        [ shift and go to state 92 ]
  ! oper_or         [ shift and go to state 93 ]


state 116

    (39) E -> E oper_menor E .
    (30) E -> E . oper_suma E
    (31) E -> E . oper_resta E
    (32) E -> E . oper_multiplicacion E
    (33) E -> E . oper_division E
    (34) E -> E . oper_resto E
    (35) E -> E . oper_igualacion E
    (36) E -> E . oper_diferenciacion E
    (37) E -> E . oper_mayor E
    (38) E -> E . oper_mayor_igual E
    (39) E -> E . oper_menor E
    (40) E -> E . oper_menor_igual E
    (41) E -> E . oper_and E
    (42) E -> E . oper_or E

    oper_igualacion reduce using rule 39 (E -> E oper_menor E .)
    oper_diferenciacion reduce using rule 39 (E -> E oper_menor E .)
    oper_mayor      reduce using rule 39 (E -> E oper_menor E .)
    oper_mayor_igual reduce using rule 39 (E -> E oper_menor E .)
    oper_menor      reduce using rule 39 (E -> E oper_menor E .)
    oper_menor_igual reduce using rule 39 (E -> E oper_menor E .)
    oper_and        reduce using rule 39 (E -> E oper_menor E .)
    oper_or         reduce using rule 39 (E -> E oper_menor E .)
    par_b           reduce using rule 39 (E -> E oper_menor E .)
    oper_not        reduce using rule 39 (E -> E oper_menor E .)
    identificador   reduce using rule 39 (E -> E oper_menor E .)
    entero          reduce using rule 39 (E -> E oper_menor E .)
    private_false   reduce using rule 39 (E -> E oper_menor E .)
    private_true    reduce using rule 39 (E -> E oper_menor E .)
    oper_suma       shift and go to state 81
    oper_resta      shift and go to state 82
    oper_multiplicacion shift and go to state 83
    oper_division   shift and go to state 84
    oper_resto      shift and go to state 85

  ! oper_suma       [ reduce using rule 39 (E -> E oper_menor E .) ]
  ! oper_resta      [ reduce using rule 39 (E -> E oper_menor E .) ]
  ! oper_multiplicacion [ reduce using rule 39 (E -> E oper_menor E .) ]
  ! oper_division   [ reduce using rule 39 (E -> E oper_menor E .) ]
  ! oper_resto      [ reduce using rule 39 (E -> E oper_menor E .) ]
  ! oper_igualacion [ shift and go to state 86 ]
  ! oper_diferenciacion [ shift and go to state 87 ]
  ! oper_mayor      [ shift and go to state 88 ]
  ! oper_mayor_igual [ shift and go to state 89 ]
  ! oper_menor      [ shift and go to state 90 ]
  ! oper_menor_igual [ shift and go to state 91 ]
  ! oper_and        [ shift and go to state 92 ]
  ! oper_or         [ shift and go to state 93 ]


state 117

    (40) E -> E oper_menor_igual E .
    (30) E -> E . oper_suma E
    (31) E -> E . oper_resta E
    (32) E -> E . oper_multiplicacion E
    (33) E -> E . oper_division E
    (34) E -> E . oper_resto E
    (35) E -> E . oper_igualacion E
    (36) E -> E . oper_diferenciacion E
    (37) E -> E . oper_mayor E
    (38) E -> E . oper_mayor_igual E
    (39) E -> E . oper_menor E
    (40) E -> E . oper_menor_igual E
    (41) E -> E . oper_and E
    (42) E -> E . oper_or E

    oper_igualacion reduce using rule 40 (E -> E oper_menor_igual E .)
    oper_diferenciacion reduce using rule 40 (E -> E oper_menor_igual E .)
    oper_mayor      reduce using rule 40 (E -> E oper_menor_igual E .)
    oper_mayor_igual reduce using rule 40 (E -> E oper_menor_igual E .)
    oper_menor      reduce using rule 40 (E -> E oper_menor_igual E .)
    oper_menor_igual reduce using rule 40 (E -> E oper_menor_igual E .)
    oper_and        reduce using rule 40 (E -> E oper_menor_igual E .)
    oper_or         reduce using rule 40 (E -> E oper_menor_igual E .)
    par_b           reduce using rule 40 (E -> E oper_menor_igual E .)
    oper_not        reduce using rule 40 (E -> E oper_menor_igual E .)
    identificador   reduce using rule 40 (E -> E oper_menor_igual E .)
    entero          reduce using rule 40 (E -> E oper_menor_igual E .)
    private_false   reduce using rule 40 (E -> E oper_menor_igual E .)
    private_true    reduce using rule 40 (E -> E oper_menor_igual E .)
    oper_suma       shift and go to state 81
    oper_resta      shift and go to state 82
    oper_multiplicacion shift and go to state 83
    oper_division   shift and go to state 84
    oper_resto      shift and go to state 85

  ! oper_suma       [ reduce using rule 40 (E -> E oper_menor_igual E .) ]
  ! oper_resta      [ reduce using rule 40 (E -> E oper_menor_igual E .) ]
  ! oper_multiplicacion [ reduce using rule 40 (E -> E oper_menor_igual E .) ]
  ! oper_division   [ reduce using rule 40 (E -> E oper_menor_igual E .) ]
  ! oper_resto      [ reduce using rule 40 (E -> E oper_menor_igual E .) ]
  ! oper_igualacion [ shift and go to state 86 ]
  ! oper_diferenciacion [ shift and go to state 87 ]
  ! oper_mayor      [ shift and go to state 88 ]
  ! oper_mayor_igual [ shift and go to state 89 ]
  ! oper_menor      [ shift and go to state 90 ]
  ! oper_menor_igual [ shift and go to state 91 ]
  ! oper_and        [ shift and go to state 92 ]
  ! oper_or         [ shift and go to state 93 ]


state 118

    (41) E -> E oper_and E .
    (30) E -> E . oper_suma E
    (31) E -> E . oper_resta E
    (32) E -> E . oper_multiplicacion E
    (33) E -> E . oper_division E
    (34) E -> E . oper_resto E
    (35) E -> E . oper_igualacion E
    (36) E -> E . oper_diferenciacion E
    (37) E -> E . oper_mayor E
    (38) E -> E . oper_mayor_igual E
    (39) E -> E . oper_menor E
    (40) E -> E . oper_menor_igual E
    (41) E -> E . oper_and E
    (42) E -> E . oper_or E

    oper_and        reduce using rule 41 (E -> E oper_and E .)
    oper_or         reduce using rule 41 (E -> E oper_and E .)
    par_b           reduce using rule 41 (E -> E oper_and E .)
    oper_not        reduce using rule 41 (E -> E oper_and E .)
    identificador   reduce using rule 41 (E -> E oper_and E .)
    entero          reduce using rule 41 (E -> E oper_and E .)
    private_false   reduce using rule 41 (E -> E oper_and E .)
    private_true    reduce using rule 41 (E -> E oper_and E .)
    oper_suma       shift and go to state 81
    oper_resta      shift and go to state 82
    oper_multiplicacion shift and go to state 83
    oper_division   shift and go to state 84
    oper_resto      shift and go to state 85
    oper_igualacion shift and go to state 86
    oper_diferenciacion shift and go to state 87
    oper_mayor      shift and go to state 88
    oper_mayor_igual shift and go to state 89
    oper_menor      shift and go to state 90
    oper_menor_igual shift and go to state 91

  ! oper_suma       [ reduce using rule 41 (E -> E oper_and E .) ]
  ! oper_resta      [ reduce using rule 41 (E -> E oper_and E .) ]
  ! oper_multiplicacion [ reduce using rule 41 (E -> E oper_and E .) ]
  ! oper_division   [ reduce using rule 41 (E -> E oper_and E .) ]
  ! oper_resto      [ reduce using rule 41 (E -> E oper_and E .) ]
  ! oper_igualacion [ reduce using rule 41 (E -> E oper_and E .) ]
  ! oper_diferenciacion [ reduce using rule 41 (E -> E oper_and E .) ]
  ! oper_mayor      [ reduce using rule 41 (E -> E oper_and E .) ]
  ! oper_mayor_igual [ reduce using rule 41 (E -> E oper_and E .) ]
  ! oper_menor      [ reduce using rule 41 (E -> E oper_and E .) ]
  ! oper_menor_igual [ reduce using rule 41 (E -> E oper_and E .) ]
  ! oper_and        [ shift and go to state 92 ]
  ! oper_or         [ shift and go to state 93 ]


state 119

    (42) E -> E oper_or E .
    (30) E -> E . oper_suma E
    (31) E -> E . oper_resta E
    (32) E -> E . oper_multiplicacion E
    (33) E -> E . oper_division E
    (34) E -> E . oper_resto E
    (35) E -> E . oper_igualacion E
    (36) E -> E . oper_diferenciacion E
    (37) E -> E . oper_mayor E
    (38) E -> E . oper_mayor_igual E
    (39) E -> E . oper_menor E
    (40) E -> E . oper_menor_igual E
    (41) E -> E . oper_and E
    (42) E -> E . oper_or E

    oper_or         reduce using rule 42 (E -> E oper_or E .)
    par_b           reduce using rule 42 (E -> E oper_or E .)
    oper_not        reduce using rule 42 (E -> E oper_or E .)
    identificador   reduce using rule 42 (E -> E oper_or E .)
    entero          reduce using rule 42 (E -> E oper_or E .)
    private_false   reduce using rule 42 (E -> E oper_or E .)
    private_true    reduce using rule 42 (E -> E oper_or E .)
    oper_suma       shift and go to state 81
    oper_resta      shift and go to state 82
    oper_multiplicacion shift and go to state 83
    oper_division   shift and go to state 84
    oper_resto      shift and go to state 85
    oper_igualacion shift and go to state 86
    oper_diferenciacion shift and go to state 87
    oper_mayor      shift and go to state 88
    oper_mayor_igual shift and go to state 89
    oper_menor      shift and go to state 90
    oper_menor_igual shift and go to state 91
    oper_and        shift and go to state 92

  ! oper_suma       [ reduce using rule 42 (E -> E oper_or E .) ]
  ! oper_resta      [ reduce using rule 42 (E -> E oper_or E .) ]
  ! oper_multiplicacion [ reduce using rule 42 (E -> E oper_or E .) ]
  ! oper_division   [ reduce using rule 42 (E -> E oper_or E .) ]
  ! oper_resto      [ reduce using rule 42 (E -> E oper_or E .) ]
  ! oper_igualacion [ reduce using rule 42 (E -> E oper_or E .) ]
  ! oper_diferenciacion [ reduce using rule 42 (E -> E oper_or E .) ]
  ! oper_mayor      [ reduce using rule 42 (E -> E oper_or E .) ]
  ! oper_mayor_igual [ reduce using rule 42 (E -> E oper_or E .) ]
  ! oper_menor      [ reduce using rule 42 (E -> E oper_or E .) ]
  ! oper_menor_igual [ reduce using rule 42 (E -> E oper_or E .) ]
  ! oper_and        [ reduce using rule 42 (E -> E oper_or E .) ]
  ! oper_or         [ shift and go to state 93 ]


state 120

    (59) EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a . INSTRUCCIONS llave_b
    (48) INSTRUCCIONS -> . INSTRUCCIONS INSTRUCCIONES2
    (49) INSTRUCCIONS -> . INSTRUCCIONES2
    (50) INSTRUCCIONES2 -> . DEC_VAR
    (51) INSTRUCCIONES2 -> . ASIG_VAR
    (52) INSTRUCCIONES2 -> . EST_CONDICIONALES
    (53) INSTRUCCIONES2 -> . EST_ITERATIVAS
    (54) INSTRUCCIONES2 -> . SENT_CFLUJO
    (55) INSTRUCCIONES2 -> . DEC_METODOS
    (56) INSTRUCCIONES2 -> . DEC_FUNCIONES
    (57) INSTRUCCIONES2 -> . RETORNO
    (58) INSTRUCCIONES2 -> . LLAMADA
    (13) DEC_VAR -> . TIPO_DATO identificador asignacion DATO ptcoma
    (25) ASIG_VAR -> . identificador asignacion DATO ptcoma
    (26) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (59) EST_ITERATIVAS -> . private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (60) EST_ITERATIVAS -> . private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (61) SENT_CFLUJO -> . private_break ptcoma
    (62) SENT_CFLUJO -> . private_continue ptcoma
    (63) DEC_METODOS -> . private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> . private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (67) DEC_FUNCIONES -> . TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> . TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (69) RETORNO -> . private_return ptcoma
    (70) RETORNO -> . private_return DATO ptcoma
    (71) LLAMADA -> . identificador par_a ARGUMENTOS par_b
    (72) LLAMADA -> . identificador par_a par_b
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    identificador   shift and go to state 14
    private_if      shift and go to state 15
    private_while   shift and go to state 16
    private_do      shift and go to state 17
    private_break   shift and go to state 18
    private_continue shift and go to state 19
    private_void    shift and go to state 20
    private_return  shift and go to state 21
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    INSTRUCCIONS                   shift and go to state 128
    INSTRUCCIONES2                 shift and go to state 60
    DEC_VAR                        shift and go to state 61
    ASIG_VAR                       shift and go to state 62
    EST_CONDICIONALES              shift and go to state 63
    EST_ITERATIVAS                 shift and go to state 64
    SENT_CFLUJO                    shift and go to state 65
    DEC_METODOS                    shift and go to state 66
    DEC_FUNCIONES                  shift and go to state 67
    RETORNO                        shift and go to state 68
    LLAMADA                        shift and go to state 69
    TIPO_DATO                      shift and go to state 13

state 121

    (60) EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while . par_a OPERACION par_b ptcoma

    par_a           shift and go to state 129


state 122

    (63) DEC_METODOS -> private_void identificador par_a PARAMETROS par_b . llave_a INSTRUCCIONS llave_b

    llave_a         shift and go to state 130


state 123

    (64) DEC_METODOS -> private_void identificador par_a par_b llave_a . INSTRUCCIONS llave_b
    (48) INSTRUCCIONS -> . INSTRUCCIONS INSTRUCCIONES2
    (49) INSTRUCCIONS -> . INSTRUCCIONES2
    (50) INSTRUCCIONES2 -> . DEC_VAR
    (51) INSTRUCCIONES2 -> . ASIG_VAR
    (52) INSTRUCCIONES2 -> . EST_CONDICIONALES
    (53) INSTRUCCIONES2 -> . EST_ITERATIVAS
    (54) INSTRUCCIONES2 -> . SENT_CFLUJO
    (55) INSTRUCCIONES2 -> . DEC_METODOS
    (56) INSTRUCCIONES2 -> . DEC_FUNCIONES
    (57) INSTRUCCIONES2 -> . RETORNO
    (58) INSTRUCCIONES2 -> . LLAMADA
    (13) DEC_VAR -> . TIPO_DATO identificador asignacion DATO ptcoma
    (25) ASIG_VAR -> . identificador asignacion DATO ptcoma
    (26) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (59) EST_ITERATIVAS -> . private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (60) EST_ITERATIVAS -> . private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (61) SENT_CFLUJO -> . private_break ptcoma
    (62) SENT_CFLUJO -> . private_continue ptcoma
    (63) DEC_METODOS -> . private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> . private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (67) DEC_FUNCIONES -> . TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> . TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (69) RETORNO -> . private_return ptcoma
    (70) RETORNO -> . private_return DATO ptcoma
    (71) LLAMADA -> . identificador par_a ARGUMENTOS par_b
    (72) LLAMADA -> . identificador par_a par_b
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    identificador   shift and go to state 14
    private_if      shift and go to state 15
    private_while   shift and go to state 16
    private_do      shift and go to state 17
    private_break   shift and go to state 18
    private_continue shift and go to state 19
    private_void    shift and go to state 20
    private_return  shift and go to state 21
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    INSTRUCCIONS                   shift and go to state 131
    INSTRUCCIONES2                 shift and go to state 60
    DEC_VAR                        shift and go to state 61
    ASIG_VAR                       shift and go to state 62
    EST_CONDICIONALES              shift and go to state 63
    EST_ITERATIVAS                 shift and go to state 64
    SENT_CFLUJO                    shift and go to state 65
    DEC_METODOS                    shift and go to state 66
    DEC_FUNCIONES                  shift and go to state 67
    RETORNO                        shift and go to state 68
    LLAMADA                        shift and go to state 69
    TIPO_DATO                      shift and go to state 13

state 124

    (67) DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a . INSTRUCCIONS llave_b
    (48) INSTRUCCIONS -> . INSTRUCCIONS INSTRUCCIONES2
    (49) INSTRUCCIONS -> . INSTRUCCIONES2
    (50) INSTRUCCIONES2 -> . DEC_VAR
    (51) INSTRUCCIONES2 -> . ASIG_VAR
    (52) INSTRUCCIONES2 -> . EST_CONDICIONALES
    (53) INSTRUCCIONES2 -> . EST_ITERATIVAS
    (54) INSTRUCCIONES2 -> . SENT_CFLUJO
    (55) INSTRUCCIONES2 -> . DEC_METODOS
    (56) INSTRUCCIONES2 -> . DEC_FUNCIONES
    (57) INSTRUCCIONES2 -> . RETORNO
    (58) INSTRUCCIONES2 -> . LLAMADA
    (13) DEC_VAR -> . TIPO_DATO identificador asignacion DATO ptcoma
    (25) ASIG_VAR -> . identificador asignacion DATO ptcoma
    (26) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (59) EST_ITERATIVAS -> . private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (60) EST_ITERATIVAS -> . private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (61) SENT_CFLUJO -> . private_break ptcoma
    (62) SENT_CFLUJO -> . private_continue ptcoma
    (63) DEC_METODOS -> . private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> . private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (67) DEC_FUNCIONES -> . TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> . TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (69) RETORNO -> . private_return ptcoma
    (70) RETORNO -> . private_return DATO ptcoma
    (71) LLAMADA -> . identificador par_a ARGUMENTOS par_b
    (72) LLAMADA -> . identificador par_a par_b
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    identificador   shift and go to state 14
    private_if      shift and go to state 15
    private_while   shift and go to state 16
    private_do      shift and go to state 17
    private_break   shift and go to state 18
    private_continue shift and go to state 19
    private_void    shift and go to state 20
    private_return  shift and go to state 21
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    TIPO_DATO                      shift and go to state 13
    INSTRUCCIONS                   shift and go to state 132
    INSTRUCCIONES2                 shift and go to state 60
    DEC_VAR                        shift and go to state 61
    ASIG_VAR                       shift and go to state 62
    EST_CONDICIONALES              shift and go to state 63
    EST_ITERATIVAS                 shift and go to state 64
    SENT_CFLUJO                    shift and go to state 65
    DEC_METODOS                    shift and go to state 66
    DEC_FUNCIONES                  shift and go to state 67
    RETORNO                        shift and go to state 68
    LLAMADA                        shift and go to state 69

state 125

    (65) PARAMETROS -> PARAMETROS coma TIPO_DATO . identificador

    identificador   shift and go to state 133


state 126

    (68) DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS . llave_b
    (48) INSTRUCCIONS -> INSTRUCCIONS . INSTRUCCIONES2
    (50) INSTRUCCIONES2 -> . DEC_VAR
    (51) INSTRUCCIONES2 -> . ASIG_VAR
    (52) INSTRUCCIONES2 -> . EST_CONDICIONALES
    (53) INSTRUCCIONES2 -> . EST_ITERATIVAS
    (54) INSTRUCCIONES2 -> . SENT_CFLUJO
    (55) INSTRUCCIONES2 -> . DEC_METODOS
    (56) INSTRUCCIONES2 -> . DEC_FUNCIONES
    (57) INSTRUCCIONES2 -> . RETORNO
    (58) INSTRUCCIONES2 -> . LLAMADA
    (13) DEC_VAR -> . TIPO_DATO identificador asignacion DATO ptcoma
    (25) ASIG_VAR -> . identificador asignacion DATO ptcoma
    (26) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (59) EST_ITERATIVAS -> . private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (60) EST_ITERATIVAS -> . private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (61) SENT_CFLUJO -> . private_break ptcoma
    (62) SENT_CFLUJO -> . private_continue ptcoma
    (63) DEC_METODOS -> . private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> . private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (67) DEC_FUNCIONES -> . TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> . TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (69) RETORNO -> . private_return ptcoma
    (70) RETORNO -> . private_return DATO ptcoma
    (71) LLAMADA -> . identificador par_a ARGUMENTOS par_b
    (72) LLAMADA -> . identificador par_a par_b
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    llave_b         shift and go to state 134
    identificador   shift and go to state 14
    private_if      shift and go to state 15
    private_while   shift and go to state 16
    private_do      shift and go to state 17
    private_break   shift and go to state 18
    private_continue shift and go to state 19
    private_void    shift and go to state 20
    private_return  shift and go to state 21
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    TIPO_DATO                      shift and go to state 13
    INSTRUCCIONES2                 shift and go to state 97
    DEC_VAR                        shift and go to state 61
    ASIG_VAR                       shift and go to state 62
    EST_CONDICIONALES              shift and go to state 63
    EST_ITERATIVAS                 shift and go to state 64
    SENT_CFLUJO                    shift and go to state 65
    DEC_METODOS                    shift and go to state 66
    DEC_FUNCIONES                  shift and go to state 67
    RETORNO                        shift and go to state 68
    LLAMADA                        shift and go to state 69

state 127

    (26) EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS . llave_b
    (27) EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS . llave_b private_else llave_a INSTRUCCIONS llave_b
    (48) INSTRUCCIONS -> INSTRUCCIONS . INSTRUCCIONES2
    (50) INSTRUCCIONES2 -> . DEC_VAR
    (51) INSTRUCCIONES2 -> . ASIG_VAR
    (52) INSTRUCCIONES2 -> . EST_CONDICIONALES
    (53) INSTRUCCIONES2 -> . EST_ITERATIVAS
    (54) INSTRUCCIONES2 -> . SENT_CFLUJO
    (55) INSTRUCCIONES2 -> . DEC_METODOS
    (56) INSTRUCCIONES2 -> . DEC_FUNCIONES
    (57) INSTRUCCIONES2 -> . RETORNO
    (58) INSTRUCCIONES2 -> . LLAMADA
    (13) DEC_VAR -> . TIPO_DATO identificador asignacion DATO ptcoma
    (25) ASIG_VAR -> . identificador asignacion DATO ptcoma
    (26) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (59) EST_ITERATIVAS -> . private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (60) EST_ITERATIVAS -> . private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (61) SENT_CFLUJO -> . private_break ptcoma
    (62) SENT_CFLUJO -> . private_continue ptcoma
    (63) DEC_METODOS -> . private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> . private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (67) DEC_FUNCIONES -> . TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> . TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (69) RETORNO -> . private_return ptcoma
    (70) RETORNO -> . private_return DATO ptcoma
    (71) LLAMADA -> . identificador par_a ARGUMENTOS par_b
    (72) LLAMADA -> . identificador par_a par_b
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    llave_b         shift and go to state 135
    identificador   shift and go to state 14
    private_if      shift and go to state 15
    private_while   shift and go to state 16
    private_do      shift and go to state 17
    private_break   shift and go to state 18
    private_continue shift and go to state 19
    private_void    shift and go to state 20
    private_return  shift and go to state 21
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    INSTRUCCIONES2                 shift and go to state 97
    DEC_VAR                        shift and go to state 61
    ASIG_VAR                       shift and go to state 62
    EST_CONDICIONALES              shift and go to state 63
    EST_ITERATIVAS                 shift and go to state 64
    SENT_CFLUJO                    shift and go to state 65
    DEC_METODOS                    shift and go to state 66
    DEC_FUNCIONES                  shift and go to state 67
    RETORNO                        shift and go to state 68
    LLAMADA                        shift and go to state 69
    TIPO_DATO                      shift and go to state 13

state 128

    (59) EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a INSTRUCCIONS . llave_b
    (48) INSTRUCCIONS -> INSTRUCCIONS . INSTRUCCIONES2
    (50) INSTRUCCIONES2 -> . DEC_VAR
    (51) INSTRUCCIONES2 -> . ASIG_VAR
    (52) INSTRUCCIONES2 -> . EST_CONDICIONALES
    (53) INSTRUCCIONES2 -> . EST_ITERATIVAS
    (54) INSTRUCCIONES2 -> . SENT_CFLUJO
    (55) INSTRUCCIONES2 -> . DEC_METODOS
    (56) INSTRUCCIONES2 -> . DEC_FUNCIONES
    (57) INSTRUCCIONES2 -> . RETORNO
    (58) INSTRUCCIONES2 -> . LLAMADA
    (13) DEC_VAR -> . TIPO_DATO identificador asignacion DATO ptcoma
    (25) ASIG_VAR -> . identificador asignacion DATO ptcoma
    (26) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (59) EST_ITERATIVAS -> . private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (60) EST_ITERATIVAS -> . private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (61) SENT_CFLUJO -> . private_break ptcoma
    (62) SENT_CFLUJO -> . private_continue ptcoma
    (63) DEC_METODOS -> . private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> . private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (67) DEC_FUNCIONES -> . TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> . TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (69) RETORNO -> . private_return ptcoma
    (70) RETORNO -> . private_return DATO ptcoma
    (71) LLAMADA -> . identificador par_a ARGUMENTOS par_b
    (72) LLAMADA -> . identificador par_a par_b
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    llave_b         shift and go to state 136
    identificador   shift and go to state 14
    private_if      shift and go to state 15
    private_while   shift and go to state 16
    private_do      shift and go to state 17
    private_break   shift and go to state 18
    private_continue shift and go to state 19
    private_void    shift and go to state 20
    private_return  shift and go to state 21
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    INSTRUCCIONES2                 shift and go to state 97
    DEC_VAR                        shift and go to state 61
    ASIG_VAR                       shift and go to state 62
    EST_CONDICIONALES              shift and go to state 63
    EST_ITERATIVAS                 shift and go to state 64
    SENT_CFLUJO                    shift and go to state 65
    DEC_METODOS                    shift and go to state 66
    DEC_FUNCIONES                  shift and go to state 67
    RETORNO                        shift and go to state 68
    LLAMADA                        shift and go to state 69
    TIPO_DATO                      shift and go to state 13

state 129

    (60) EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a . OPERACION par_b ptcoma
    (28) OPERACION -> . OPERACION E
    (29) OPERACION -> . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    OPERACION                      shift and go to state 137
    E                              shift and go to state 52

state 130

    (63) DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a . INSTRUCCIONS llave_b
    (48) INSTRUCCIONS -> . INSTRUCCIONS INSTRUCCIONES2
    (49) INSTRUCCIONS -> . INSTRUCCIONES2
    (50) INSTRUCCIONES2 -> . DEC_VAR
    (51) INSTRUCCIONES2 -> . ASIG_VAR
    (52) INSTRUCCIONES2 -> . EST_CONDICIONALES
    (53) INSTRUCCIONES2 -> . EST_ITERATIVAS
    (54) INSTRUCCIONES2 -> . SENT_CFLUJO
    (55) INSTRUCCIONES2 -> . DEC_METODOS
    (56) INSTRUCCIONES2 -> . DEC_FUNCIONES
    (57) INSTRUCCIONES2 -> . RETORNO
    (58) INSTRUCCIONES2 -> . LLAMADA
    (13) DEC_VAR -> . TIPO_DATO identificador asignacion DATO ptcoma
    (25) ASIG_VAR -> . identificador asignacion DATO ptcoma
    (26) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (59) EST_ITERATIVAS -> . private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (60) EST_ITERATIVAS -> . private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (61) SENT_CFLUJO -> . private_break ptcoma
    (62) SENT_CFLUJO -> . private_continue ptcoma
    (63) DEC_METODOS -> . private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> . private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (67) DEC_FUNCIONES -> . TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> . TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (69) RETORNO -> . private_return ptcoma
    (70) RETORNO -> . private_return DATO ptcoma
    (71) LLAMADA -> . identificador par_a ARGUMENTOS par_b
    (72) LLAMADA -> . identificador par_a par_b
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    identificador   shift and go to state 14
    private_if      shift and go to state 15
    private_while   shift and go to state 16
    private_do      shift and go to state 17
    private_break   shift and go to state 18
    private_continue shift and go to state 19
    private_void    shift and go to state 20
    private_return  shift and go to state 21
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    INSTRUCCIONS                   shift and go to state 138
    INSTRUCCIONES2                 shift and go to state 60
    DEC_VAR                        shift and go to state 61
    ASIG_VAR                       shift and go to state 62
    EST_CONDICIONALES              shift and go to state 63
    EST_ITERATIVAS                 shift and go to state 64
    SENT_CFLUJO                    shift and go to state 65
    DEC_METODOS                    shift and go to state 66
    DEC_FUNCIONES                  shift and go to state 67
    RETORNO                        shift and go to state 68
    LLAMADA                        shift and go to state 69
    TIPO_DATO                      shift and go to state 13

state 131

    (64) DEC_METODOS -> private_void identificador par_a par_b llave_a INSTRUCCIONS . llave_b
    (48) INSTRUCCIONS -> INSTRUCCIONS . INSTRUCCIONES2
    (50) INSTRUCCIONES2 -> . DEC_VAR
    (51) INSTRUCCIONES2 -> . ASIG_VAR
    (52) INSTRUCCIONES2 -> . EST_CONDICIONALES
    (53) INSTRUCCIONES2 -> . EST_ITERATIVAS
    (54) INSTRUCCIONES2 -> . SENT_CFLUJO
    (55) INSTRUCCIONES2 -> . DEC_METODOS
    (56) INSTRUCCIONES2 -> . DEC_FUNCIONES
    (57) INSTRUCCIONES2 -> . RETORNO
    (58) INSTRUCCIONES2 -> . LLAMADA
    (13) DEC_VAR -> . TIPO_DATO identificador asignacion DATO ptcoma
    (25) ASIG_VAR -> . identificador asignacion DATO ptcoma
    (26) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (59) EST_ITERATIVAS -> . private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (60) EST_ITERATIVAS -> . private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (61) SENT_CFLUJO -> . private_break ptcoma
    (62) SENT_CFLUJO -> . private_continue ptcoma
    (63) DEC_METODOS -> . private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> . private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (67) DEC_FUNCIONES -> . TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> . TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (69) RETORNO -> . private_return ptcoma
    (70) RETORNO -> . private_return DATO ptcoma
    (71) LLAMADA -> . identificador par_a ARGUMENTOS par_b
    (72) LLAMADA -> . identificador par_a par_b
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    llave_b         shift and go to state 139
    identificador   shift and go to state 14
    private_if      shift and go to state 15
    private_while   shift and go to state 16
    private_do      shift and go to state 17
    private_break   shift and go to state 18
    private_continue shift and go to state 19
    private_void    shift and go to state 20
    private_return  shift and go to state 21
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    INSTRUCCIONES2                 shift and go to state 97
    DEC_VAR                        shift and go to state 61
    ASIG_VAR                       shift and go to state 62
    EST_CONDICIONALES              shift and go to state 63
    EST_ITERATIVAS                 shift and go to state 64
    SENT_CFLUJO                    shift and go to state 65
    DEC_METODOS                    shift and go to state 66
    DEC_FUNCIONES                  shift and go to state 67
    RETORNO                        shift and go to state 68
    LLAMADA                        shift and go to state 69
    TIPO_DATO                      shift and go to state 13

state 132

    (67) DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS . llave_b
    (48) INSTRUCCIONS -> INSTRUCCIONS . INSTRUCCIONES2
    (50) INSTRUCCIONES2 -> . DEC_VAR
    (51) INSTRUCCIONES2 -> . ASIG_VAR
    (52) INSTRUCCIONES2 -> . EST_CONDICIONALES
    (53) INSTRUCCIONES2 -> . EST_ITERATIVAS
    (54) INSTRUCCIONES2 -> . SENT_CFLUJO
    (55) INSTRUCCIONES2 -> . DEC_METODOS
    (56) INSTRUCCIONES2 -> . DEC_FUNCIONES
    (57) INSTRUCCIONES2 -> . RETORNO
    (58) INSTRUCCIONES2 -> . LLAMADA
    (13) DEC_VAR -> . TIPO_DATO identificador asignacion DATO ptcoma
    (25) ASIG_VAR -> . identificador asignacion DATO ptcoma
    (26) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (59) EST_ITERATIVAS -> . private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (60) EST_ITERATIVAS -> . private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (61) SENT_CFLUJO -> . private_break ptcoma
    (62) SENT_CFLUJO -> . private_continue ptcoma
    (63) DEC_METODOS -> . private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> . private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (67) DEC_FUNCIONES -> . TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> . TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (69) RETORNO -> . private_return ptcoma
    (70) RETORNO -> . private_return DATO ptcoma
    (71) LLAMADA -> . identificador par_a ARGUMENTOS par_b
    (72) LLAMADA -> . identificador par_a par_b
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    llave_b         shift and go to state 140
    identificador   shift and go to state 14
    private_if      shift and go to state 15
    private_while   shift and go to state 16
    private_do      shift and go to state 17
    private_break   shift and go to state 18
    private_continue shift and go to state 19
    private_void    shift and go to state 20
    private_return  shift and go to state 21
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    TIPO_DATO                      shift and go to state 13
    INSTRUCCIONES2                 shift and go to state 97
    DEC_VAR                        shift and go to state 61
    ASIG_VAR                       shift and go to state 62
    EST_CONDICIONALES              shift and go to state 63
    EST_ITERATIVAS                 shift and go to state 64
    SENT_CFLUJO                    shift and go to state 65
    DEC_METODOS                    shift and go to state 66
    DEC_FUNCIONES                  shift and go to state 67
    RETORNO                        shift and go to state 68
    LLAMADA                        shift and go to state 69

state 133

    (65) PARAMETROS -> PARAMETROS coma TIPO_DATO identificador .

    par_b           reduce using rule 65 (PARAMETROS -> PARAMETROS coma TIPO_DATO identificador .)
    coma            reduce using rule 65 (PARAMETROS -> PARAMETROS coma TIPO_DATO identificador .)


state 134

    (68) DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b .

    identificador   reduce using rule 68 (DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_if      reduce using rule 68 (DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_while   reduce using rule 68 (DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_do      reduce using rule 68 (DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_break   reduce using rule 68 (DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_continue reduce using rule 68 (DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_void    reduce using rule 68 (DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_return  reduce using rule 68 (DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_int     reduce using rule 68 (DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_double  reduce using rule 68 (DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_string  reduce using rule 68 (DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_char    reduce using rule 68 (DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_boolean reduce using rule 68 (DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    $end            reduce using rule 68 (DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    llave_b         reduce using rule 68 (DEC_FUNCIONES -> TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b .)


state 135

    (26) EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .
    (27) EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b . private_else llave_a INSTRUCCIONS llave_b

    identificador   reduce using rule 26 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_if      reduce using rule 26 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_while   reduce using rule 26 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_do      reduce using rule 26 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_break   reduce using rule 26 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_continue reduce using rule 26 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_void    reduce using rule 26 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_return  reduce using rule 26 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_int     reduce using rule 26 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_double  reduce using rule 26 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_string  reduce using rule 26 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_char    reduce using rule 26 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_boolean reduce using rule 26 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    $end            reduce using rule 26 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    llave_b         reduce using rule 26 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_else    shift and go to state 141


state 136

    (59) EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .

    identificador   reduce using rule 59 (EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_if      reduce using rule 59 (EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_while   reduce using rule 59 (EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_do      reduce using rule 59 (EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_break   reduce using rule 59 (EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_continue reduce using rule 59 (EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_void    reduce using rule 59 (EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_return  reduce using rule 59 (EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_int     reduce using rule 59 (EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_double  reduce using rule 59 (EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_string  reduce using rule 59 (EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_char    reduce using rule 59 (EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    private_boolean reduce using rule 59 (EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    $end            reduce using rule 59 (EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)
    llave_b         reduce using rule 59 (EST_ITERATIVAS -> private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b .)


state 137

    (60) EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION . par_b ptcoma
    (28) OPERACION -> OPERACION . E
    (30) E -> . E oper_suma E
    (31) E -> . E oper_resta E
    (32) E -> . E oper_multiplicacion E
    (33) E -> . E oper_division E
    (34) E -> . E oper_resto E
    (35) E -> . E oper_igualacion E
    (36) E -> . E oper_diferenciacion E
    (37) E -> . E oper_mayor E
    (38) E -> . E oper_mayor_igual E
    (39) E -> . E oper_menor E
    (40) E -> . E oper_menor_igual E
    (41) E -> . E oper_and E
    (42) E -> . E oper_or E
    (43) E -> . oper_not E
    (44) E -> . identificador
    (45) E -> . entero
    (46) E -> . private_false
    (47) E -> . private_true

    par_b           shift and go to state 142
    oper_not        shift and go to state 53
    identificador   shift and go to state 54
    entero          shift and go to state 55
    private_false   shift and go to state 56
    private_true    shift and go to state 57

    E                              shift and go to state 80

state 138

    (63) DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS . llave_b
    (48) INSTRUCCIONS -> INSTRUCCIONS . INSTRUCCIONES2
    (50) INSTRUCCIONES2 -> . DEC_VAR
    (51) INSTRUCCIONES2 -> . ASIG_VAR
    (52) INSTRUCCIONES2 -> . EST_CONDICIONALES
    (53) INSTRUCCIONES2 -> . EST_ITERATIVAS
    (54) INSTRUCCIONES2 -> . SENT_CFLUJO
    (55) INSTRUCCIONES2 -> . DEC_METODOS
    (56) INSTRUCCIONES2 -> . DEC_FUNCIONES
    (57) INSTRUCCIONES2 -> . RETORNO
    (58) INSTRUCCIONES2 -> . LLAMADA
    (13) DEC_VAR -> . TIPO_DATO identificador asignacion DATO ptcoma
    (25) ASIG_VAR -> . identificador asignacion DATO ptcoma
    (26) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (59) EST_ITERATIVAS -> . private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (60) EST_ITERATIVAS -> . private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (61) SENT_CFLUJO -> . private_break ptcoma
    (62) SENT_CFLUJO -> . private_continue ptcoma
    (63) DEC_METODOS -> . private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> . private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (67) DEC_FUNCIONES -> . TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> . TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (69) RETORNO -> . private_return ptcoma
    (70) RETORNO -> . private_return DATO ptcoma
    (71) LLAMADA -> . identificador par_a ARGUMENTOS par_b
    (72) LLAMADA -> . identificador par_a par_b
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    llave_b         shift and go to state 143
    identificador   shift and go to state 14
    private_if      shift and go to state 15
    private_while   shift and go to state 16
    private_do      shift and go to state 17
    private_break   shift and go to state 18
    private_continue shift and go to state 19
    private_void    shift and go to state 20
    private_return  shift and go to state 21
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    INSTRUCCIONES2                 shift and go to state 97
    DEC_VAR                        shift and go to state 61
    ASIG_VAR                       shift and go to state 62
    EST_CONDICIONALES              shift and go to state 63
    EST_ITERATIVAS                 shift and go to state 64
    SENT_CFLUJO                    shift and go to state 65
    DEC_METODOS                    shift and go to state 66
    DEC_FUNCIONES                  shift and go to state 67
    RETORNO                        shift and go to state 68
    LLAMADA                        shift and go to state 69
    TIPO_DATO                      shift and go to state 13

state 139

    (64) DEC_METODOS -> private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b .

    identificador   reduce using rule 64 (DEC_METODOS -> private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_if      reduce using rule 64 (DEC_METODOS -> private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_while   reduce using rule 64 (DEC_METODOS -> private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_do      reduce using rule 64 (DEC_METODOS -> private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_break   reduce using rule 64 (DEC_METODOS -> private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_continue reduce using rule 64 (DEC_METODOS -> private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_void    reduce using rule 64 (DEC_METODOS -> private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_return  reduce using rule 64 (DEC_METODOS -> private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_int     reduce using rule 64 (DEC_METODOS -> private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_double  reduce using rule 64 (DEC_METODOS -> private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_string  reduce using rule 64 (DEC_METODOS -> private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_char    reduce using rule 64 (DEC_METODOS -> private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    private_boolean reduce using rule 64 (DEC_METODOS -> private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    $end            reduce using rule 64 (DEC_METODOS -> private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b .)
    llave_b         reduce using rule 64 (DEC_METODOS -> private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b .)


state 140

    (67) DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .

    identificador   reduce using rule 67 (DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_if      reduce using rule 67 (DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_while   reduce using rule 67 (DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_do      reduce using rule 67 (DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_break   reduce using rule 67 (DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_continue reduce using rule 67 (DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_void    reduce using rule 67 (DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_return  reduce using rule 67 (DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_int     reduce using rule 67 (DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_double  reduce using rule 67 (DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_string  reduce using rule 67 (DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_char    reduce using rule 67 (DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_boolean reduce using rule 67 (DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    $end            reduce using rule 67 (DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    llave_b         reduce using rule 67 (DEC_FUNCIONES -> TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)


state 141

    (27) EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else . llave_a INSTRUCCIONS llave_b

    llave_a         shift and go to state 144


state 142

    (60) EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b . ptcoma

    ptcoma          shift and go to state 145


state 143

    (63) DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .

    identificador   reduce using rule 63 (DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_if      reduce using rule 63 (DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_while   reduce using rule 63 (DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_do      reduce using rule 63 (DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_break   reduce using rule 63 (DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_continue reduce using rule 63 (DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_void    reduce using rule 63 (DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_return  reduce using rule 63 (DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_int     reduce using rule 63 (DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_double  reduce using rule 63 (DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_string  reduce using rule 63 (DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_char    reduce using rule 63 (DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    private_boolean reduce using rule 63 (DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    $end            reduce using rule 63 (DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)
    llave_b         reduce using rule 63 (DEC_METODOS -> private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b .)


state 144

    (27) EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a . INSTRUCCIONS llave_b
    (48) INSTRUCCIONS -> . INSTRUCCIONS INSTRUCCIONES2
    (49) INSTRUCCIONS -> . INSTRUCCIONES2
    (50) INSTRUCCIONES2 -> . DEC_VAR
    (51) INSTRUCCIONES2 -> . ASIG_VAR
    (52) INSTRUCCIONES2 -> . EST_CONDICIONALES
    (53) INSTRUCCIONES2 -> . EST_ITERATIVAS
    (54) INSTRUCCIONES2 -> . SENT_CFLUJO
    (55) INSTRUCCIONES2 -> . DEC_METODOS
    (56) INSTRUCCIONES2 -> . DEC_FUNCIONES
    (57) INSTRUCCIONES2 -> . RETORNO
    (58) INSTRUCCIONES2 -> . LLAMADA
    (13) DEC_VAR -> . TIPO_DATO identificador asignacion DATO ptcoma
    (25) ASIG_VAR -> . identificador asignacion DATO ptcoma
    (26) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (59) EST_ITERATIVAS -> . private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (60) EST_ITERATIVAS -> . private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (61) SENT_CFLUJO -> . private_break ptcoma
    (62) SENT_CFLUJO -> . private_continue ptcoma
    (63) DEC_METODOS -> . private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> . private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (67) DEC_FUNCIONES -> . TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> . TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (69) RETORNO -> . private_return ptcoma
    (70) RETORNO -> . private_return DATO ptcoma
    (71) LLAMADA -> . identificador par_a ARGUMENTOS par_b
    (72) LLAMADA -> . identificador par_a par_b
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    identificador   shift and go to state 14
    private_if      shift and go to state 15
    private_while   shift and go to state 16
    private_do      shift and go to state 17
    private_break   shift and go to state 18
    private_continue shift and go to state 19
    private_void    shift and go to state 20
    private_return  shift and go to state 21
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    INSTRUCCIONS                   shift and go to state 146
    INSTRUCCIONES2                 shift and go to state 60
    DEC_VAR                        shift and go to state 61
    ASIG_VAR                       shift and go to state 62
    EST_CONDICIONALES              shift and go to state 63
    EST_ITERATIVAS                 shift and go to state 64
    SENT_CFLUJO                    shift and go to state 65
    DEC_METODOS                    shift and go to state 66
    DEC_FUNCIONES                  shift and go to state 67
    RETORNO                        shift and go to state 68
    LLAMADA                        shift and go to state 69
    TIPO_DATO                      shift and go to state 13

state 145

    (60) EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma .

    identificador   reduce using rule 60 (EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma .)
    private_if      reduce using rule 60 (EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma .)
    private_while   reduce using rule 60 (EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma .)
    private_do      reduce using rule 60 (EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma .)
    private_break   reduce using rule 60 (EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma .)
    private_continue reduce using rule 60 (EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma .)
    private_void    reduce using rule 60 (EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma .)
    private_return  reduce using rule 60 (EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma .)
    private_int     reduce using rule 60 (EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma .)
    private_double  reduce using rule 60 (EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma .)
    private_string  reduce using rule 60 (EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma .)
    private_char    reduce using rule 60 (EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma .)
    private_boolean reduce using rule 60 (EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma .)
    $end            reduce using rule 60 (EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma .)
    llave_b         reduce using rule 60 (EST_ITERATIVAS -> private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma .)


state 146

    (27) EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS . llave_b
    (48) INSTRUCCIONS -> INSTRUCCIONS . INSTRUCCIONES2
    (50) INSTRUCCIONES2 -> . DEC_VAR
    (51) INSTRUCCIONES2 -> . ASIG_VAR
    (52) INSTRUCCIONES2 -> . EST_CONDICIONALES
    (53) INSTRUCCIONES2 -> . EST_ITERATIVAS
    (54) INSTRUCCIONES2 -> . SENT_CFLUJO
    (55) INSTRUCCIONES2 -> . DEC_METODOS
    (56) INSTRUCCIONES2 -> . DEC_FUNCIONES
    (57) INSTRUCCIONES2 -> . RETORNO
    (58) INSTRUCCIONES2 -> . LLAMADA
    (13) DEC_VAR -> . TIPO_DATO identificador asignacion DATO ptcoma
    (25) ASIG_VAR -> . identificador asignacion DATO ptcoma
    (26) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (27) EST_CONDICIONALES -> . private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b
    (59) EST_ITERATIVAS -> . private_while par_a OPERACION par_b llave_a INSTRUCCIONS llave_b
    (60) EST_ITERATIVAS -> . private_do llave_a INSTRUCCIONS llave_b private_while par_a OPERACION par_b ptcoma
    (61) SENT_CFLUJO -> . private_break ptcoma
    (62) SENT_CFLUJO -> . private_continue ptcoma
    (63) DEC_METODOS -> . private_void identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (64) DEC_METODOS -> . private_void identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (67) DEC_FUNCIONES -> . TIPO_DATO identificador par_a PARAMETROS par_b llave_a INSTRUCCIONS llave_b
    (68) DEC_FUNCIONES -> . TIPO_DATO identificador par_a par_b llave_a INSTRUCCIONS llave_b
    (69) RETORNO -> . private_return ptcoma
    (70) RETORNO -> . private_return DATO ptcoma
    (71) LLAMADA -> . identificador par_a ARGUMENTOS par_b
    (72) LLAMADA -> . identificador par_a par_b
    (14) TIPO_DATO -> . private_int
    (15) TIPO_DATO -> . private_double
    (16) TIPO_DATO -> . private_string
    (17) TIPO_DATO -> . private_char
    (18) TIPO_DATO -> . private_boolean

    llave_b         shift and go to state 147
    identificador   shift and go to state 14
    private_if      shift and go to state 15
    private_while   shift and go to state 16
    private_do      shift and go to state 17
    private_break   shift and go to state 18
    private_continue shift and go to state 19
    private_void    shift and go to state 20
    private_return  shift and go to state 21
    private_int     shift and go to state 22
    private_double  shift and go to state 23
    private_string  shift and go to state 24
    private_char    shift and go to state 25
    private_boolean shift and go to state 26

    INSTRUCCIONES2                 shift and go to state 97
    DEC_VAR                        shift and go to state 61
    ASIG_VAR                       shift and go to state 62
    EST_CONDICIONALES              shift and go to state 63
    EST_ITERATIVAS                 shift and go to state 64
    SENT_CFLUJO                    shift and go to state 65
    DEC_METODOS                    shift and go to state 66
    DEC_FUNCIONES                  shift and go to state 67
    RETORNO                        shift and go to state 68
    LLAMADA                        shift and go to state 69
    TIPO_DATO                      shift and go to state 13

state 147

    (27) EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b .

    identificador   reduce using rule 27 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b .)
    private_if      reduce using rule 27 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b .)
    private_while   reduce using rule 27 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b .)
    private_do      reduce using rule 27 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b .)
    private_break   reduce using rule 27 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b .)
    private_continue reduce using rule 27 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b .)
    private_void    reduce using rule 27 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b .)
    private_return  reduce using rule 27 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b .)
    private_int     reduce using rule 27 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b .)
    private_double  reduce using rule 27 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b .)
    private_string  reduce using rule 27 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b .)
    private_char    reduce using rule 27 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b .)
    private_boolean reduce using rule 27 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b .)
    $end            reduce using rule 27 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b .)
    llave_b         reduce using rule 27 (EST_CONDICIONALES -> private_if par_a OPERACION par_b llave_a INSTRUCCIONS llave_b private_else llave_a INSTRUCCIONS llave_b .)

